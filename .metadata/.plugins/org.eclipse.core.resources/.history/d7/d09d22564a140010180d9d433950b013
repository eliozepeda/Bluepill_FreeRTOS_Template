/**********************************************************

*          SEGGER MICROCONTROLLER SYSTEME GmbH

*   Solutions for real time microcontroller applications

***********************************************************

File    : HIF_UART.c

Purpose : Terminal control for Flasher using USART1 on PA9/PA10

--------- END-OF-HEADER ---------------------------------*/





#include "SEGGER_SYSVIEW.h"



#if (SEGGER_UART_REC == 1)

#include "SEGGER_RTT.h"

#include "stm32f103xb.h"

//baud rate will be 20000000

#define OS_FSYS 64000000L   // MCU core frequency of Flasher ARM Pro V4

#define RCC_BASE_ADDR       0X40021000 //bc



//#define OFF_AHB2ENR         0x4C       // bc NO AHB2 in stm32f103xx
//#define OFF_APB2ENR         0x60       // bc
#define OFF_APB2ENR         0x18       // bc stm32f103xx

//#define OFF_APB1ENR         0x58       // ELIO NUCLEO L476RG
#define OFF_APB1ENR         0x1C       // stm32f103xx


//#define RCC_AHB2ENR         *(volatile uint32_t*)(RCC_BASE_ADDR + OFF_AHB2ENR) NO AHB2 in stm32f103xx

#define RCC_APB2ENR         *(volatile uint32_t*)(RCC_BASE_ADDR + OFF_APB2ENR)

#define RCC_APB1ENR         *(volatile uint32_t*)(RCC_BASE_ADDR + OFF_APB1ENR) // ELIO NUCLEO L476RG

#define GPIOC_BASE_ADDR     0x48000800 // bc NOT USED***************

//#define GPIOA_BASE_ADDR   0x48000000 // ELIO NUCLEO L476RG
#define GPIOA_BASE_ADDR     0x40010800 // stm32f103xx

//#define OFF_MODER           0x00        //bc // GPIOx_MODER    (GPIO port mode register)
#define OFF_MODER_LOW            0x00        //bc // GPIOx_MODER/CRL LOW   (GPIO port mode register)
#define OFF_MODER_HIGH           0x04        //bc // GPIOx_MODER/CRL HIGH    (GPIO port mode register)

//#define OFF_OTYPER          0x04        //bc // GPIOx_OTYPER   (GPIO port output type register)


#define USART2_BASE_ADDR    0x40004400 //stm32f103xx





#define OFF_SR              0x00        //bc // Status registerstm32f103xx

#define OFF_RDR             0x04        //bc // DR is  composed of two registers, one for transmission (TDR) and one for reception (RDR)stm32f103xx

//#define OFF_TDR             0x28        //bc // Data register

#define OFF_BRR             0x08        //bc // Baudrate register stm32f103xx

#define OFF_CR1             0x0C        //bc // Control register 1

#define OFF_CR2             0x10        //bc // Control register 2

#define OFF_CR3             0x14        //bc // Control register 3





#define UART_BASECLK        32000000L

#define GPIO_BASE_ADDR      GPIOA_BASE_ADDR //stm32f103xx

#define USART_BASE_ADDR     USART2_BASE_ADDR

#define GPIO_UART_TX_BIT    2                //ELIO USART2 TX: Pin pa2

#define GPIO_UART_RX_BIT    3                 //ELIO USART2 RX: Pin pa3

#define USART_IRQn          USART2_IRQn



#define GPIO_MODER          *(volatile uint32_t*)(GPIO_BASE_ADDR + OFF_MODER_LOW)


#define USART_SR            *(volatile uint32_t*)(USART_BASE_ADDR + OFF_SR)

#define USART_BRR           *(volatile uint32_t*)(USART_BASE_ADDR + OFF_BRR)

#define USART_CR1           *(volatile uint32_t*)(USART_BASE_ADDR + OFF_CR1)

#define USART_CR2           *(volatile uint32_t*)(USART_BASE_ADDR + OFF_CR2)

#define USART_CR3           *(volatile uint32_t*)(USART_BASE_ADDR + OFF_CR3)

#define USART_RDR            *(volatile uint32_t*)(USART_BASE_ADDR + OFF_RDR)



#define USART_RXNE              5     // Read data register not empty flag (SR)

#define USART_TC                6     // Transmission complete flag (SR)

#define USART_RX_ERROR_FLAGS  0xB     // Parity, framing, overrun error flags (SR)

#define USART_RXNEIE            5     // Read data register not empty interrupt enable (CR1)

#define USART_TCIE              6     // Transmission complete interrupt enable (CR1)

#define USART_TXE               7     // Transmit data register empty (Does NOT indicate that byte has already been sent just indicates that it has been copied to the shift register)

#define USART_TXEIE             7     // Transmit data register empty interrupt enable





typedef void UART_ON_RX_FUNC(uint8_t Data);

typedef int  UART_ON_TX_FUNC(uint8_t* pChar);



typedef UART_ON_TX_FUNC* UART_ON_TX_FUNC_P;

typedef UART_ON_RX_FUNC* UART_ON_RX_FUNC_P;





static UART_ON_RX_FUNC_P _cbOnRx;

static UART_ON_TX_FUNC_P _cbOnTx;





void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx);





#define _SERVER_HELLO_SIZE        (4)

#define _TARGET_HELLO_SIZE        (4)



static const U8 _abHelloMsg[_TARGET_HELLO_SIZE] = { 'S', 'V', (SEGGER_SYSVIEW_VERSION / 10000), (SEGGER_SYSVIEW_VERSION / 1000) % 10 };  // "Hello" message expected by SysView: [ 'S', 'V', <PROTOCOL_MAJOR>, <PROTOCOL_MINOR> ]



static struct {

  U8         NumBytesHelloRcvd;

  U8         NumBytesHelloSent;

  int        ChannelID;

} _SVInfo = {0,0,1};



static void _StartSysView(void) {

  int r;



  r = SEGGER_SYSVIEW_IsStarted();

  if (r == 0) {

    SEGGER_SYSVIEW_Start();

  }

}



static void _cbOnUARTRx(U8 Data) {

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?

    _SVInfo.NumBytesHelloRcvd++;

    goto Done;

  }

  _StartSysView();

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly

Done:

  return;

}



static int _cbOnUARTTx(U8* pChar) {

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];

    _SVInfo.NumBytesHelloSent++;

    r = 1;

    goto Done;

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);

  if (r < 0) {  // Failed to read from up buffer?

    r = 0;

  }

Done:

  return r;

}



void SEGGER_UART_init(U32 baud)

{

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);

}





/*********************************************************************

*

*       HIF_UART_WaitForTxEnd

*/

void HIF_UART_WaitForTxEnd(void) {

  //

  // Wait until transmission has finished (e.g. before changing baudrate).

  //

  while ((USART_SR & (1 << USART_TXE)) == 0);  // Wait until transmit buffer empty (Last byte shift from data to shift register)

  while ((USART_SR & (1 << USART_TC)) == 0);   // Wait until transmission is complete

}



/*********************************************************************

*

*       USART1_IRQHandler

*

*  Function descriptio

*    Interrupt handler.

*    Handles both, Rx and Tx interrupts

*

*  Notes

*    (1) This is a high-prio interrupt so it may NOT use embOS functions

*        However, this also means that embOS will never disable this interrupt

*/

void USART2_IRQHandler(void);

void USART2_IRQHandler(void) {int UsartStatus;

  uint8_t v;

  int r;



  UsartStatus = USART_SR;                              // Examine status register

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?

    v = USART_RDR;                                      // Read data

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {

        _cbOnRx(v);

      }

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.

    //

    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,

    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...

      return;

    }

    r = _cbOnTx(&v);

    if (r == 0) {                          // No more characters to send ?

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.

      USART_RDR = v;  // Start transmission by writing to data register (RDR is for TX and RX in stm32f103)

    }

  }

}



/*********************************************************************

*

*       HIF_UART_EnableTXEInterrupt()

*/

void HIF_UART_EnableTXEInterrupt(void) {

  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register

}







/*********************************************************************

*

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {



  //uint32_t v;

  uint32_t Div;

  //

  // Configure USART RX/TX pins for alternate function AF7  CAMBIAAAAAAAAAAAAAAAAAR

  //

  //RCC_APB2ENR |= 1 << 14;                // Enable LPUART1 clock

  RCC_APB1ENR |= 1 << 17;                // Enable LPUART2 clock

  RCC_APB2ENR |= 1 << 2;                // Enable IO port A clock

						//  v  = GPIO_AFRL;
						//
						//  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
						//
						//  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
						//
						//  GPIO_AFRL = v;

  // TX = pin PA 2 --> CRL, posición [11:8]
  GPIO_MODER &= ~(0xF << 8);       // Limpia bits 11:8
  GPIO_MODER |=  (0xB << 8);       // 1011: MODE = 10 (Output 2 MHz), CNF = 10 (AF push-pull)
  // RX = pin PA 3 --> CRL, posición [15:12]
  GPIO_MODER &= ~(0xF << 12);     // Limpia bits 15:12 (PA3)
  GPIO_MODER |=  (0x4 << 12);     // 0100: MODE=00 (input), CNF=01 (floating input)

  //

  // Configure USART RX/TX pins for alternate function usage

  //

			//  v  = GPIO_MODER;
			//
			//  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
			//
			//  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
			//
			//  GPIO_MODER = v;

  //

  // Initialize USART

  //

  USART_CR1 = 0
      | (1 << 13)                        // UE     = 1; USART enabled
      | (0 << 12)                        // M      = 0; Word length 8 bits
      | (0 << 10)                        // PCE    = 0; No parity control
      | (1 <<  5)                        // RXNEIE = 1; RXNE interrupt enabled
      | (1 <<  3)                        // TE     = 1; Transmitter enabled
      | (1 <<  2)                        // RE     = 1; Receiver enabled
      ;

  USART_CR2 = 0
      | (0 << 12)                        // STOP = 00b; 1 Stop bit
      ;

  USART_CR3 = 0
      | (1 << 7)                         // DMAT = 1; DMA para el transmisor habilitado
      ;

  //

  // Set baudrate

  //

  Div = Baudrate*16 ;                       // We use

  Div = (((UART_BASECLK)) / Div);   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.

  if (Div > 0xFFF)
  {

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)

  }

  if (Div >= 1) {

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider

  }



  //

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;

  _cbOnTx = cbOnTx;



  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS

  NVIC_EnableIRQ(USART_IRQn);

}



#endif
