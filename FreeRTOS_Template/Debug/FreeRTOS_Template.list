
FreeRTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006930  08006930  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006930  08006930  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006930  08006930  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004490  2000001c  08006954  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044ac  08006954  000244ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018347  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fa0  00000000  00000000  0003838c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003b330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001200  00000000  00000000  0003c6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a3a1  00000000  00000000  0003d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010970  00000000  00000000  00057c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000974d5  00000000  00000000  000685c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ffa9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  000ffb1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	080067ac 	.word	0x080067ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	080067ac 	.word	0x080067ac

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20004404 	.word	0x20004404

080001dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f003 0307 	and.w	r3, r3, #7
 80001ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <__NVIC_SetPriorityGrouping+0x44>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f2:	68ba      	ldr	r2, [r7, #8]
 80001f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001f8:	4013      	ands	r3, r2
 80001fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800020c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <__NVIC_SetPriorityGrouping+0x44>)
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	60d3      	str	r3, [r2, #12]
}
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 f9af 	bl	800058c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f827 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f867 	bl	8000304 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Enable the CYCCNT counter
    DWT_CTRL |= (1<<0);
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x48>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a0c      	ldr	r2, [pc, #48]	; (800026c <main+0x48>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6013      	str	r3, [r2, #0]

    //Initialize UART
    SEGGER_UART_init(200000);
 8000242:	480b      	ldr	r0, [pc, #44]	; (8000270 <main+0x4c>)
 8000244:	f004 f876 	bl	8004334 <SEGGER_UART_init>
    NVIC_SetPriorityGrouping(0);
 8000248:	2000      	movs	r0, #0
 800024a:	f7ff ffc7 	bl	80001dc <__NVIC_SetPriorityGrouping>
    //Start events recording
    SEGGER_SYSVIEW_Conf();
 800024e:	f003 fea5 	bl	8003f9c <SEGGER_SYSVIEW_Conf>

    //SEGGER_SYSVIEW_Start(); //already called in segger_uart.c

    xTaskCreate(vTask1, "task1", 140, (void*)"Tarea 1\n", 2, NULL);  /* Register on Kernel the task1 with priority 1 */
 8000252:	2300      	movs	r3, #0
 8000254:	9301      	str	r3, [sp, #4]
 8000256:	2302      	movs	r3, #2
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <main+0x50>)
 800025c:	228c      	movs	r2, #140	; 0x8c
 800025e:	4906      	ldr	r1, [pc, #24]	; (8000278 <main+0x54>)
 8000260:	4806      	ldr	r0, [pc, #24]	; (800027c <main+0x58>)
 8000262:	f002 f8b5 	bl	80023d0 <xTaskCreate>


    vTaskStartScheduler( );
 8000266:	f002 fa4d 	bl	8002704 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026a:	e7fe      	b.n	800026a <main+0x46>
 800026c:	e0001000 	.word	0xe0001000
 8000270:	00030d40 	.word	0x00030d40
 8000274:	080067c4 	.word	0x080067c4
 8000278:	080067d0 	.word	0x080067d0
 800027c:	08000385 	.word	0x08000385

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f006 fa84 	bl	800679c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2310      	movs	r3, #16
 80002ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002b2:	2300      	movs	r3, #0
 80002b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0318 	add.w	r3, r7, #24
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fc01 	bl	8000ac8 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002cc:	f000 f882 	bl	80003d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	2302      	movs	r3, #2
 80002d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fe6c 	bl	8000fc8 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002f6:	f000 f86d 	bl	80003d4 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	; 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0308 	add.w	r3, r7, #8
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_GPIO_Init+0x78>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <MX_GPIO_Init+0x78>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_GPIO_Init+0x78>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_GPIO_Init+0x78>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <MX_GPIO_Init+0x78>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_GPIO_Init+0x78>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <MX_GPIO_Init+0x7c>)
 8000350:	f000 fb88 	bl	8000a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2302      	movs	r3, #2
 8000364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4619      	mov	r1, r3
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <MX_GPIO_Init+0x7c>)
 800036e:	f000 fa1f 	bl	80007b0 <HAL_GPIO_Init>

}
 8000372:	bf00      	nop
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40011000 	.word	0x40011000

08000384 <vTask1>:

/* USER CODE BEGIN 4 */
static void vTask1( void *pvParameters )
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
    for(;;)
    {

        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800038c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000390:	4805      	ldr	r0, [pc, #20]	; (80003a8 <vTask1+0x24>)
 8000392:	f000 fb7f 	bl	8000a94 <HAL_GPIO_TogglePin>
        SEGGER_SYSVIEW_PrintfTarget("HOLA MUNDOO");
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <vTask1+0x28>)
 8000398:	f006 f924 	bl	80065e4 <SEGGER_SYSVIEW_PrintfTarget>

        vTaskDelay(pdMS_TO_TICKS(500));
 800039c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a0:	f002 f978 	bl	8002694 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003a4:	e7f2      	b.n	800038c <vTask1+0x8>
 80003a6:	bf00      	nop
 80003a8:	40011000 	.word	0x40011000
 80003ac:	080067d8 	.word	0x080067d8

080003b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d101      	bne.n	80003c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003c2:	f000 f8f9 	bl	80005b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40012c00 	.word	0x40012c00

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	; (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08c      	sub	sp, #48	; 0x30
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000454:	2200      	movs	r2, #0
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	2019      	movs	r0, #25
 800045a:	f000 f97e 	bl	800075a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800045e:	2019      	movs	r0, #25
 8000460:	f000 f997 	bl	8000792 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <HAL_InitTick+0x9c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <HAL_InitTick+0x9c>)
 800046a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <HAL_InitTick+0x9c>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800047c:	f107 0210 	add.w	r2, r7, #16
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f000 ff08 	bl	800129c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800048c:	f000 fef2 	bl	8001274 <HAL_RCC_GetPCLK2Freq>
 8000490:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000494:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <HAL_InitTick+0xa0>)
 8000496:	fba2 2303 	umull	r2, r3, r2, r3
 800049a:	0c9b      	lsrs	r3, r3, #18
 800049c:	3b01      	subs	r3, #1
 800049e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <HAL_InitTick+0xa4>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <HAL_InitTick+0xa8>)
 80004a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <HAL_InitTick+0xa4>)
 80004a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <HAL_InitTick+0xa4>)
 80004b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_InitTick+0xa4>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <HAL_InitTick+0xa4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <HAL_InitTick+0xa4>)
 80004c2:	f000 ff39 	bl	8001338 <HAL_TIM_Base_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d104      	bne.n	80004d6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <HAL_InitTick+0xa4>)
 80004ce:	f000 ff8b 	bl	80013e8 <HAL_TIM_Base_Start_IT>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e000      	b.n	80004d8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3730      	adds	r7, #48	; 0x30
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	431bde83 	.word	0x431bde83
 80004e8:	20004378 	.word	0x20004378
 80004ec:	40012c00 	.word	0x40012c00

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <HardFault_Handler+0x4>

08000502 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <MemManage_Handler+0x4>

08000508 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <BusFault_Handler+0x4>

0800050e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <UsageFault_Handler+0x4>

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <TIM1_UP_IRQHandler+0x10>)
 8000526:	f000 ffb1 	bl	800148c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20004378 	.word	0x20004378

08000534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	; (8000578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000566:	f7ff ffe5 	bl	8000534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056a:	f006 f8d9 	bl	8006720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f7ff fe59 	bl	8000224 <main>
  bx lr
 8000572:	4770      	bx	lr
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800057c:	08006938 	.word	0x08006938
  ldr r2, =_sbss
 8000580:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000584:	200044ac 	.word	0x200044ac

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>
	...

0800058c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x28>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x28>)
 8000596:	f043 0310 	orr.w	r3, r3, #16
 800059a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f8d1 	bl	8000744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff ff4e 	bl	8000444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f7ff ff1a 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40022000 	.word	0x40022000

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x1c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x20>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <HAL_IncTick+0x20>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20000008 	.word	0x20000008
 80005d8:	200043c0 	.word	0x200043c0

080005dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <HAL_GetTick+0x10>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	200043c0 	.word	0x200043c0

080005f0 <__NVIC_SetPriorityGrouping>:
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4906      	ldr	r1, [pc, #24]	; (8000688 <__NVIC_EnableIRQ+0x34>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ff4f 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
 8000766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800076c:	f7ff ff64 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	6978      	ldr	r0, [r7, #20]
 8000778:	f7ff ffb2 	bl	80006e0 <NVIC_EncodePriority>
 800077c:	4602      	mov	r2, r0
 800077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff81 	bl	800068c <__NVIC_SetPriority>
}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff57 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b08b      	sub	sp, #44	; 0x2c
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007c2:	e127      	b.n	8000a14 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007c4:	2201      	movs	r2, #1
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	69fa      	ldr	r2, [r7, #28]
 80007d4:	4013      	ands	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	429a      	cmp	r2, r3
 80007de:	f040 8116 	bne.w	8000a0e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b12      	cmp	r3, #18
 80007e8:	d034      	beq.n	8000854 <HAL_GPIO_Init+0xa4>
 80007ea:	2b12      	cmp	r3, #18
 80007ec:	d80d      	bhi.n	800080a <HAL_GPIO_Init+0x5a>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d02b      	beq.n	800084a <HAL_GPIO_Init+0x9a>
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d804      	bhi.n	8000800 <HAL_GPIO_Init+0x50>
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d031      	beq.n	800085e <HAL_GPIO_Init+0xae>
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d01c      	beq.n	8000838 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007fe:	e048      	b.n	8000892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000800:	2b03      	cmp	r3, #3
 8000802:	d043      	beq.n	800088c <HAL_GPIO_Init+0xdc>
 8000804:	2b11      	cmp	r3, #17
 8000806:	d01b      	beq.n	8000840 <HAL_GPIO_Init+0x90>
          break;
 8000808:	e043      	b.n	8000892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800080a:	4a89      	ldr	r2, [pc, #548]	; (8000a30 <HAL_GPIO_Init+0x280>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d026      	beq.n	800085e <HAL_GPIO_Init+0xae>
 8000810:	4a87      	ldr	r2, [pc, #540]	; (8000a30 <HAL_GPIO_Init+0x280>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d806      	bhi.n	8000824 <HAL_GPIO_Init+0x74>
 8000816:	4a87      	ldr	r2, [pc, #540]	; (8000a34 <HAL_GPIO_Init+0x284>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d020      	beq.n	800085e <HAL_GPIO_Init+0xae>
 800081c:	4a86      	ldr	r2, [pc, #536]	; (8000a38 <HAL_GPIO_Init+0x288>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d01d      	beq.n	800085e <HAL_GPIO_Init+0xae>
          break;
 8000822:	e036      	b.n	8000892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000824:	4a85      	ldr	r2, [pc, #532]	; (8000a3c <HAL_GPIO_Init+0x28c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d019      	beq.n	800085e <HAL_GPIO_Init+0xae>
 800082a:	4a85      	ldr	r2, [pc, #532]	; (8000a40 <HAL_GPIO_Init+0x290>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d016      	beq.n	800085e <HAL_GPIO_Init+0xae>
 8000830:	4a84      	ldr	r2, [pc, #528]	; (8000a44 <HAL_GPIO_Init+0x294>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d013      	beq.n	800085e <HAL_GPIO_Init+0xae>
          break;
 8000836:	e02c      	b.n	8000892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	623b      	str	r3, [r7, #32]
          break;
 800083e:	e028      	b.n	8000892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	3304      	adds	r3, #4
 8000846:	623b      	str	r3, [r7, #32]
          break;
 8000848:	e023      	b.n	8000892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	3308      	adds	r3, #8
 8000850:	623b      	str	r3, [r7, #32]
          break;
 8000852:	e01e      	b.n	8000892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	330c      	adds	r3, #12
 800085a:	623b      	str	r3, [r7, #32]
          break;
 800085c:	e019      	b.n	8000892 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d102      	bne.n	800086c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000866:	2304      	movs	r3, #4
 8000868:	623b      	str	r3, [r7, #32]
          break;
 800086a:	e012      	b.n	8000892 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d105      	bne.n	8000880 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000874:	2308      	movs	r3, #8
 8000876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	611a      	str	r2, [r3, #16]
          break;
 800087e:	e008      	b.n	8000892 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000880:	2308      	movs	r3, #8
 8000882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	615a      	str	r2, [r3, #20]
          break;
 800088a:	e002      	b.n	8000892 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
          break;
 8000890:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	2bff      	cmp	r3, #255	; 0xff
 8000896:	d801      	bhi.n	800089c <HAL_GPIO_Init+0xec>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	e001      	b.n	80008a0 <HAL_GPIO_Init+0xf0>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3304      	adds	r3, #4
 80008a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	2bff      	cmp	r3, #255	; 0xff
 80008a6:	d802      	bhi.n	80008ae <HAL_GPIO_Init+0xfe>
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	e002      	b.n	80008b4 <HAL_GPIO_Init+0x104>
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	3b08      	subs	r3, #8
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	210f      	movs	r1, #15
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	401a      	ands	r2, r3
 80008c6:	6a39      	ldr	r1, [r7, #32]
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	431a      	orrs	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 8096 	beq.w	8000a0e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4b59      	ldr	r3, [pc, #356]	; (8000a48 <HAL_GPIO_Init+0x298>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a58      	ldr	r2, [pc, #352]	; (8000a48 <HAL_GPIO_Init+0x298>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b56      	ldr	r3, [pc, #344]	; (8000a48 <HAL_GPIO_Init+0x298>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008fa:	4a54      	ldr	r2, [pc, #336]	; (8000a4c <HAL_GPIO_Init+0x29c>)
 80008fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fe:	089b      	lsrs	r3, r3, #2
 8000900:	3302      	adds	r3, #2
 8000902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000906:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	220f      	movs	r2, #15
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	4013      	ands	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a4b      	ldr	r2, [pc, #300]	; (8000a50 <HAL_GPIO_Init+0x2a0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d013      	beq.n	800094e <HAL_GPIO_Init+0x19e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <HAL_GPIO_Init+0x2a4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d00d      	beq.n	800094a <HAL_GPIO_Init+0x19a>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a49      	ldr	r2, [pc, #292]	; (8000a58 <HAL_GPIO_Init+0x2a8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d007      	beq.n	8000946 <HAL_GPIO_Init+0x196>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a48      	ldr	r2, [pc, #288]	; (8000a5c <HAL_GPIO_Init+0x2ac>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_GPIO_Init+0x192>
 800093e:	2303      	movs	r3, #3
 8000940:	e006      	b.n	8000950 <HAL_GPIO_Init+0x1a0>
 8000942:	2304      	movs	r3, #4
 8000944:	e004      	b.n	8000950 <HAL_GPIO_Init+0x1a0>
 8000946:	2302      	movs	r3, #2
 8000948:	e002      	b.n	8000950 <HAL_GPIO_Init+0x1a0>
 800094a:	2301      	movs	r3, #1
 800094c:	e000      	b.n	8000950 <HAL_GPIO_Init+0x1a0>
 800094e:	2300      	movs	r3, #0
 8000950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000952:	f002 0203 	and.w	r2, r2, #3
 8000956:	0092      	lsls	r2, r2, #2
 8000958:	4093      	lsls	r3, r2
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000960:	493a      	ldr	r1, [pc, #232]	; (8000a4c <HAL_GPIO_Init+0x29c>)
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	3302      	adds	r3, #2
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4938      	ldr	r1, [pc, #224]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	600b      	str	r3, [r1, #0]
 8000986:	e006      	b.n	8000996 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000988:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	43db      	mvns	r3, r3
 8000990:	4933      	ldr	r1, [pc, #204]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 8000992:	4013      	ands	r3, r2
 8000994:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d006      	beq.n	80009b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	492e      	ldr	r1, [pc, #184]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	604b      	str	r3, [r1, #4]
 80009ae:	e006      	b.n	80009be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	4929      	ldr	r1, [pc, #164]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009ba:	4013      	ands	r3, r2
 80009bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	4924      	ldr	r1, [pc, #144]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	608b      	str	r3, [r1, #8]
 80009d6:	e006      	b.n	80009e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	43db      	mvns	r3, r3
 80009e0:	491f      	ldr	r1, [pc, #124]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d006      	beq.n	8000a00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	491a      	ldr	r1, [pc, #104]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60cb      	str	r3, [r1, #12]
 80009fe:	e006      	b.n	8000a0e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	4915      	ldr	r1, [pc, #84]	; (8000a60 <HAL_GPIO_Init+0x2b0>)
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	3301      	adds	r3, #1
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f47f aed0 	bne.w	80007c4 <HAL_GPIO_Init+0x14>
  }
}
 8000a24:	bf00      	nop
 8000a26:	372c      	adds	r7, #44	; 0x2c
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	10210000 	.word	0x10210000
 8000a34:	10110000 	.word	0x10110000
 8000a38:	10120000 	.word	0x10120000
 8000a3c:	10310000 	.word	0x10310000
 8000a40:	10320000 	.word	0x10320000
 8000a44:	10220000 	.word	0x10220000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	40010400 	.word	0x40010400

08000a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
 8000a70:	4613      	mov	r3, r2
 8000a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a74:	787b      	ldrb	r3, [r7, #1]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a7a:	887a      	ldrh	r2, [r7, #2]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a80:	e003      	b.n	8000a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	041a      	lsls	r2, r3, #16
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	611a      	str	r2, [r3, #16]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	041a      	lsls	r2, r3, #16
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43d9      	mvns	r1, r3
 8000ab2:	887b      	ldrh	r3, [r7, #2]
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	611a      	str	r2, [r3, #16]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e26c      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8087 	beq.w	8000bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ae8:	4b92      	ldr	r3, [pc, #584]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d00c      	beq.n	8000b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000af4:	4b8f      	ldr	r3, [pc, #572]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 030c 	and.w	r3, r3, #12
 8000afc:	2b08      	cmp	r3, #8
 8000afe:	d112      	bne.n	8000b26 <HAL_RCC_OscConfig+0x5e>
 8000b00:	4b8c      	ldr	r3, [pc, #560]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b0c:	d10b      	bne.n	8000b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0e:	4b89      	ldr	r3, [pc, #548]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d06c      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x12c>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d168      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e246      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b2e:	d106      	bne.n	8000b3e <HAL_RCC_OscConfig+0x76>
 8000b30:	4b80      	ldr	r3, [pc, #512]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a7f      	ldr	r2, [pc, #508]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e02e      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10c      	bne.n	8000b60 <HAL_RCC_OscConfig+0x98>
 8000b46:	4b7b      	ldr	r3, [pc, #492]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a7a      	ldr	r2, [pc, #488]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	4b78      	ldr	r3, [pc, #480]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a77      	ldr	r2, [pc, #476]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e01d      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b68:	d10c      	bne.n	8000b84 <HAL_RCC_OscConfig+0xbc>
 8000b6a:	4b72      	ldr	r3, [pc, #456]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a71      	ldr	r2, [pc, #452]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4b6f      	ldr	r3, [pc, #444]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a6e      	ldr	r2, [pc, #440]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e00b      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b84:	4b6b      	ldr	r3, [pc, #428]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a6a      	ldr	r2, [pc, #424]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b68      	ldr	r3, [pc, #416]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a67      	ldr	r2, [pc, #412]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d013      	beq.n	8000bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fd1a 	bl	80005dc <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fd16 	bl	80005dc <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e1fa      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bbe:	4b5d      	ldr	r3, [pc, #372]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f0      	beq.n	8000bac <HAL_RCC_OscConfig+0xe4>
 8000bca:	e014      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fd06 	bl	80005dc <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fd02 	bl	80005dc <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	; 0x64
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e1e6      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be6:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f0      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x10c>
 8000bf2:	e000      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d063      	beq.n	8000cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c02:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00b      	beq.n	8000c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c0e:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d11c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x18c>
 8000c1a:	4b46      	ldr	r3, [pc, #280]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d116      	bne.n	8000c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c26:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d005      	beq.n	8000c3e <HAL_RCC_OscConfig+0x176>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d001      	beq.n	8000c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e1ba      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4939      	ldr	r1, [pc, #228]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c52:	e03a      	b.n	8000cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d020      	beq.n	8000c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c5c:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <HAL_RCC_OscConfig+0x270>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c62:	f7ff fcbb 	bl	80005dc <HAL_GetTick>
 8000c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fcb7 	bl	80005dc <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e19b      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f0      	beq.n	8000c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4927      	ldr	r1, [pc, #156]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
 8000c9c:	e015      	b.n	8000cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc9a 	bl	80005dc <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cac:	f7ff fc96 	bl	80005dc <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e17a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d03a      	beq.n	8000d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d019      	beq.n	8000d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_RCC_OscConfig+0x274>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ce4:	f7ff fc7a 	bl	80005dc <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cec:	f7ff fc76 	bl	80005dc <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e15a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 faf6 	bl	80012fc <RCC_Delay>
 8000d10:	e01c      	b.n	8000d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_RCC_OscConfig+0x274>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d18:	f7ff fc60 	bl	80005dc <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d1e:	e00f      	b.n	8000d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d20:	f7ff fc5c 	bl	80005dc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d908      	bls.n	8000d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e140      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	42420000 	.word	0x42420000
 8000d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d40:	4b9e      	ldr	r3, [pc, #632]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1e9      	bne.n	8000d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a6 	beq.w	8000ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d5e:	4b97      	ldr	r3, [pc, #604]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10d      	bne.n	8000d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b94      	ldr	r3, [pc, #592]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a93      	ldr	r2, [pc, #588]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b91      	ldr	r3, [pc, #580]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d82:	2301      	movs	r3, #1
 8000d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d86:	4b8e      	ldr	r3, [pc, #568]	; (8000fc0 <HAL_RCC_OscConfig+0x4f8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d118      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d92:	4b8b      	ldr	r3, [pc, #556]	; (8000fc0 <HAL_RCC_OscConfig+0x4f8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a8a      	ldr	r2, [pc, #552]	; (8000fc0 <HAL_RCC_OscConfig+0x4f8>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fc1d 	bl	80005dc <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000da6:	f7ff fc19 	bl	80005dc <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b64      	cmp	r3, #100	; 0x64
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e0fd      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db8:	4b81      	ldr	r3, [pc, #516]	; (8000fc0 <HAL_RCC_OscConfig+0x4f8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f0      	beq.n	8000da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d106      	bne.n	8000dda <HAL_RCC_OscConfig+0x312>
 8000dcc:	4b7b      	ldr	r3, [pc, #492]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	4a7a      	ldr	r2, [pc, #488]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6213      	str	r3, [r2, #32]
 8000dd8:	e02d      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x334>
 8000de2:	4b76      	ldr	r3, [pc, #472]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4a75      	ldr	r2, [pc, #468]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	6213      	str	r3, [r2, #32]
 8000dee:	4b73      	ldr	r3, [pc, #460]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a72      	ldr	r2, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	f023 0304 	bic.w	r3, r3, #4
 8000df8:	6213      	str	r3, [r2, #32]
 8000dfa:	e01c      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d10c      	bne.n	8000e1e <HAL_RCC_OscConfig+0x356>
 8000e04:	4b6d      	ldr	r3, [pc, #436]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a6c      	ldr	r2, [pc, #432]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6213      	str	r3, [r2, #32]
 8000e10:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	4a69      	ldr	r2, [pc, #420]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6213      	str	r3, [r2, #32]
 8000e1c:	e00b      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000e1e:	4b67      	ldr	r3, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4a66      	ldr	r2, [pc, #408]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	6213      	str	r3, [r2, #32]
 8000e2a:	4b64      	ldr	r3, [pc, #400]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4a63      	ldr	r2, [pc, #396]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	f023 0304 	bic.w	r3, r3, #4
 8000e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d015      	beq.n	8000e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fbcd 	bl	80005dc <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f7ff fbc9 	bl	80005dc <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e0ab      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5c:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0ee      	beq.n	8000e46 <HAL_RCC_OscConfig+0x37e>
 8000e68:	e014      	b.n	8000e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fbb7 	bl	80005dc <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e70:	e00a      	b.n	8000e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e72:	f7ff fbb3 	bl	80005dc <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e095      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e88:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1ee      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d105      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9a:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a47      	ldr	r2, [pc, #284]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8081 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eb0:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d061      	beq.n	8000f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d146      	bne.n	8000f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <HAL_RCC_OscConfig+0x4fc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fb87 	bl	80005dc <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ed2:	f7ff fb83 	bl	80005dc <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e067      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f0      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef8:	d108      	bne.n	8000f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	492d      	ldr	r1, [pc, #180]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a19      	ldr	r1, [r3, #32]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	4927      	ldr	r1, [pc, #156]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_RCC_OscConfig+0x4fc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fb57 	bl	80005dc <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f32:	f7ff fb53 	bl	80005dc <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e037      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x46a>
 8000f50:	e02f      	b.n	8000fb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_RCC_OscConfig+0x4fc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fb40 	bl	80005dc <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fb3c 	bl	80005dc <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e020      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x498>
 8000f7e:	e018      	b.n	8000fb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e013      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d106      	bne.n	8000fae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40007000 	.word	0x40007000
 8000fc4:	42420060 	.word	0x42420060

08000fc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0d0      	b.n	800117e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fdc:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d910      	bls.n	800100c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fea:	4b67      	ldr	r3, [pc, #412]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 0207 	bic.w	r2, r3, #7
 8000ff2:	4965      	ldr	r1, [pc, #404]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ffa:	4b63      	ldr	r3, [pc, #396]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d001      	beq.n	800100c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e0b8      	b.n	800117e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d020      	beq.n	800105a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001024:	4b59      	ldr	r3, [pc, #356]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a58      	ldr	r2, [pc, #352]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800102e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800103c:	4b53      	ldr	r3, [pc, #332]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4a52      	ldr	r2, [pc, #328]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001042:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001046:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001048:	4b50      	ldr	r3, [pc, #320]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	494d      	ldr	r1, [pc, #308]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d040      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	4b47      	ldr	r3, [pc, #284]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d115      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e07f      	b.n	800117e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d107      	bne.n	8001096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e073      	b.n	800117e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e06b      	b.n	800117e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f023 0203 	bic.w	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4936      	ldr	r1, [pc, #216]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b8:	f7ff fa90 	bl	80005dc <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	e00a      	b.n	80010d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c0:	f7ff fa8c 	bl	80005dc <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e053      	b.n	800117e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 020c 	and.w	r2, r3, #12
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d1eb      	bne.n	80010c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d210      	bcs.n	8001118 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 0207 	bic.w	r2, r3, #7
 80010fe:	4922      	ldr	r1, [pc, #136]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d001      	beq.n	8001118 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e032      	b.n	800117e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	4916      	ldr	r1, [pc, #88]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	490e      	ldr	r1, [pc, #56]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001156:	f000 f821 	bl	800119c <HAL_RCC_GetSysClockFreq>
 800115a:	4601      	mov	r1, r0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_RCC_ClockConfig+0x1c8>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	fa21 f303 	lsr.w	r3, r1, r3
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <HAL_RCC_ClockConfig+0x1cc>)
 8001170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_RCC_ClockConfig+0x1d0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f964 	bl	8000444 <HAL_InitTick>

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40022000 	.word	0x40022000
 800118c:	40021000 	.word	0x40021000
 8001190:	080068dc 	.word	0x080068dc
 8001194:	20000000 	.word	0x20000000
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800119c:	b490      	push	{r4, r7}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_GetSysClockFreq+0xb0>)
 80011a4:	1d3c      	adds	r4, r7, #4
 80011a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d002      	beq.n	80011dc <HAL_RCC_GetSysClockFreq+0x40>
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d003      	beq.n	80011e2 <HAL_RCC_GetSysClockFreq+0x46>
 80011da:	e02d      	b.n	8001238 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_RCC_GetSysClockFreq+0xbc>)
 80011de:	623b      	str	r3, [r7, #32]
      break;
 80011e0:	e02d      	b.n	800123e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	0c9b      	lsrs	r3, r3, #18
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011ee:	4413      	add	r3, r2
 80011f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	0c5b      	lsrs	r3, r3, #17
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800120e:	4413      	add	r3, r2
 8001210:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001214:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_RCC_GetSysClockFreq+0xbc>)
 800121a:	fb02 f203 	mul.w	r2, r2, r3
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	fbb2 f3f3 	udiv	r3, r2, r3
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
 8001226:	e004      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_RCC_GetSysClockFreq+0xc0>)
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	623b      	str	r3, [r7, #32]
      break;
 8001236:	e002      	b.n	800123e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_RCC_GetSysClockFreq+0xbc>)
 800123a:	623b      	str	r3, [r7, #32]
      break;
 800123c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800123e:	6a3b      	ldr	r3, [r7, #32]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bc90      	pop	{r4, r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	080067e4 	.word	0x080067e4
 8001250:	080067f4 	.word	0x080067f4
 8001254:	40021000 	.word	0x40021000
 8001258:	007a1200 	.word	0x007a1200
 800125c:	003d0900 	.word	0x003d0900

08001260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <HAL_RCC_GetHCLKFreq+0x10>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000000 	.word	0x20000000

08001274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001278:	f7ff fff2 	bl	8001260 <HAL_RCC_GetHCLKFreq>
 800127c:	4601      	mov	r1, r0
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	0adb      	lsrs	r3, r3, #11
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	080068ec 	.word	0x080068ec

0800129c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	220f      	movs	r2, #15
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_RCC_GetClockConfig+0x58>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_RCC_GetClockConfig+0x58>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_GetClockConfig+0x58>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_RCC_GetClockConfig+0x58>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0207 	and.w	r2, r3, #7
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40022000 	.word	0x40022000

080012fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <RCC_Delay+0x34>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <RCC_Delay+0x38>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0a5b      	lsrs	r3, r3, #9
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001318:	bf00      	nop
  }
  while (Delay --);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	60fa      	str	r2, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f9      	bne.n	8001318 <RCC_Delay+0x1c>
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000000 	.word	0x20000000
 8001334:	10624dd3 	.word	0x10624dd3

08001338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e041      	b.n	80013ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f839 	bl	80013d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3304      	adds	r3, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4610      	mov	r0, r2
 8001378:	f000 f9b4 	bl	80016e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d001      	beq.n	8001400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e03a      	b.n	8001476 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_TIM_Base_Start_IT+0x98>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00e      	beq.n	8001440 <HAL_TIM_Base_Start_IT+0x58>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142a:	d009      	beq.n	8001440 <HAL_TIM_Base_Start_IT+0x58>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <HAL_TIM_Base_Start_IT+0x9c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d004      	beq.n	8001440 <HAL_TIM_Base_Start_IT+0x58>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_TIM_Base_Start_IT+0xa0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d111      	bne.n	8001464 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b06      	cmp	r3, #6
 8001450:	d010      	beq.n	8001474 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001462:	e007      	b.n	8001474 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40012c00 	.word	0x40012c00
 8001484:	40000400 	.word	0x40000400
 8001488:	40000800 	.word	0x40000800

0800148c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d122      	bne.n	80014e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d11b      	bne.n	80014e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f06f 0202 	mvn.w	r2, #2
 80014b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f8ed 	bl	80016ae <HAL_TIM_IC_CaptureCallback>
 80014d4:	e005      	b.n	80014e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f8e0 	bl	800169c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f8ef 	bl	80016c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d122      	bne.n	800153c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b04      	cmp	r3, #4
 8001502:	d11b      	bne.n	800153c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f06f 0204 	mvn.w	r2, #4
 800150c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8c3 	bl	80016ae <HAL_TIM_IC_CaptureCallback>
 8001528:	e005      	b.n	8001536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f8b6 	bl	800169c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f8c5 	bl	80016c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b08      	cmp	r3, #8
 8001548:	d122      	bne.n	8001590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b08      	cmp	r3, #8
 8001556:	d11b      	bne.n	8001590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f06f 0208 	mvn.w	r2, #8
 8001560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2204      	movs	r2, #4
 8001566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f899 	bl	80016ae <HAL_TIM_IC_CaptureCallback>
 800157c:	e005      	b.n	800158a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f88c 	bl	800169c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f89b 	bl	80016c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b10      	cmp	r3, #16
 800159c:	d122      	bne.n	80015e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b10      	cmp	r3, #16
 80015aa:	d11b      	bne.n	80015e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0210 	mvn.w	r2, #16
 80015b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2208      	movs	r2, #8
 80015ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f86f 	bl	80016ae <HAL_TIM_IC_CaptureCallback>
 80015d0:	e005      	b.n	80015de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f862 	bl	800169c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f871 	bl	80016c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d10e      	bne.n	8001610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0201 	mvn.w	r2, #1
 8001608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7fe fed0 	bl	80003b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b80      	cmp	r3, #128	; 0x80
 800161c:	d10e      	bne.n	800163c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001628:	2b80      	cmp	r3, #128	; 0x80
 800162a:	d107      	bne.n	800163c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f8bf 	bl	80017ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001646:	2b40      	cmp	r3, #64	; 0x40
 8001648:	d10e      	bne.n	8001668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001654:	2b40      	cmp	r3, #64	; 0x40
 8001656:	d107      	bne.n	8001668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f835 	bl	80016d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b20      	cmp	r3, #32
 8001674:	d10e      	bne.n	8001694 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b20      	cmp	r3, #32
 8001682:	d107      	bne.n	8001694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f06f 0220 	mvn.w	r2, #32
 800168c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f88a 	bl	80017a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a29      	ldr	r2, [pc, #164]	; (800179c <TIM_Base_SetConfig+0xb8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00b      	beq.n	8001714 <TIM_Base_SetConfig+0x30>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001702:	d007      	beq.n	8001714 <TIM_Base_SetConfig+0x30>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <TIM_Base_SetConfig+0xbc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d003      	beq.n	8001714 <TIM_Base_SetConfig+0x30>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <TIM_Base_SetConfig+0xc0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d108      	bne.n	8001726 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a1c      	ldr	r2, [pc, #112]	; (800179c <TIM_Base_SetConfig+0xb8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00b      	beq.n	8001746 <TIM_Base_SetConfig+0x62>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d007      	beq.n	8001746 <TIM_Base_SetConfig+0x62>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <TIM_Base_SetConfig+0xbc>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d003      	beq.n	8001746 <TIM_Base_SetConfig+0x62>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <TIM_Base_SetConfig+0xc0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d108      	bne.n	8001758 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a07      	ldr	r2, [pc, #28]	; (800179c <TIM_Base_SetConfig+0xb8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d103      	bne.n	800178c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	615a      	str	r2, [r3, #20]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40000800 	.word	0x40000800

080017a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f103 0208 	add.w	r2, r3, #8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f103 0208 	add.w	r2, r3, #8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 0208 	add.w	r2, r3, #8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187e:	d103      	bne.n	8001888 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e00c      	b.n	80018a2 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3308      	adds	r3, #8
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e002      	b.n	8001896 <vListInsert+0x2e>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d2f6      	bcs.n	8001890 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	601a      	str	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6892      	ldr	r2, [r2, #8]
 80018ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6852      	ldr	r2, [r2, #4]
 80018f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d103      	bne.n	800190c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	1e5a      	subs	r2, r3, #1
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
	...

0800192c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001944:	f383 8811 	msr	BASEPRI, r3
 8001948:	f3bf 8f6f 	isb	sy
 800194c:	f3bf 8f4f 	dsb	sy
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	e7fe      	b.n	8001952 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8001954:	f002 f822 	bl	800399c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	441a      	add	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	3b01      	subs	r3, #1
 8001986:	68f9      	ldr	r1, [r7, #12]
 8001988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	441a      	add	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	22ff      	movs	r2, #255	; 0xff
 80019a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d114      	bne.n	80019d4 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01a      	beq.n	80019e8 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3310      	adds	r3, #16
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 f948 	bl	8002c4c <xTaskRemoveFromEventList>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d012      	beq.n	80019e8 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <xQueueGenericReset+0xcc>)
 80019c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	e009      	b.n	80019e8 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3310      	adds	r3, #16
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fef7 	bl	80017cc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3324      	adds	r3, #36	; 0x24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fef2 	bl	80017cc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80019e8:	f002 f806 	bl	80039f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000ed04 	.word	0xe000ed04

080019fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	4613      	mov	r3, r2
 8001a08:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <xQueueGenericCreate+0x28>
 8001a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	e7fe      	b.n	8001a22 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <xQueueGenericCreate+0x46>
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d101      	bne.n	8001a46 <xQueueGenericCreate+0x4a>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <xQueueGenericCreate+0x4c>
 8001a46:	2300      	movs	r3, #0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <xQueueGenericCreate+0x64>
 8001a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e7fe      	b.n	8001a5e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001a66:	d909      	bls.n	8001a7c <xQueueGenericCreate+0x80>
 8001a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6c:	f383 8811 	msr	BASEPRI, r3
 8001a70:	f3bf 8f6f 	isb	sy
 8001a74:	f3bf 8f4f 	dsb	sy
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e7fe      	b.n	8001a7a <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	3350      	adds	r3, #80	; 0x50
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 f887 	bl	8003b94 <pvPortMalloc>
 8001a86:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00d      	beq.n	8001aaa <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3350      	adds	r3, #80	; 0x50
 8001a96:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a98:	79fa      	ldrb	r2, [r7, #7]
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f805 	bl	8001ab4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
    }
 8001aac:	4618      	mov	r0, r3
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e002      	b.n	8001ad6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	69b8      	ldr	r0, [r7, #24]
 8001ae6:	f7ff ff21 	bl	800192c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	68f9      	ldr	r1, [r7, #12]
 8001af8:	2073      	movs	r0, #115	; 0x73
 8001afa:	f003 ff6b 	bl	80059d4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b090      	sub	sp, #64	; 0x40
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <xQueueGenericSend+0x30>
 8001b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b36:	e7fe      	b.n	8001b36 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <xQueueGenericSend+0x3e>
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <xQueueGenericSend+0x42>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <xQueueGenericSend+0x44>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <xQueueGenericSend+0x5c>
 8001b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	e7fe      	b.n	8001b62 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d103      	bne.n	8001b72 <xQueueGenericSend+0x6a>
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <xQueueGenericSend+0x6e>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <xQueueGenericSend+0x70>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <xQueueGenericSend+0x88>
 8001b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b80:	f383 8811 	msr	BASEPRI, r3
 8001b84:	f3bf 8f6f 	isb	sy
 8001b88:	f3bf 8f4f 	dsb	sy
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	e7fe      	b.n	8001b8e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b90:	f001 f9f6 	bl	8002f80 <xTaskGetSchedulerState>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <xQueueGenericSend+0x98>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <xQueueGenericSend+0x9c>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <xQueueGenericSend+0x9e>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <xQueueGenericSend+0xb6>
 8001baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bae:	f383 8811 	msr	BASEPRI, r3
 8001bb2:	f3bf 8f6f 	isb	sy
 8001bb6:	f3bf 8f4f 	dsb	sy
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	e7fe      	b.n	8001bbc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001bbe:	f001 feed 	bl	800399c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d302      	bcc.n	8001bd4 <xQueueGenericSend+0xcc>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d136      	bne.n	8001c42 <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 fc0e 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	460b      	mov	r3, r1
 8001be6:	4601      	mov	r1, r0
 8001be8:	205a      	movs	r0, #90	; 0x5a
 8001bea:	f003 ff69 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bf4:	f000 fa78 	bl	80020e8 <prvCopyDataToQueue>
 8001bf8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c04:	3324      	adds	r3, #36	; 0x24
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 f820 	bl	8002c4c <xTaskRemoveFromEventList>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d013      	beq.n	8001c3a <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001c12:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <xQueueGenericSend+0x240>)
 8001c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	f3bf 8f6f 	isb	sy
 8001c22:	e00a      	b.n	8001c3a <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <xQueueGenericSend+0x240>)
 8001c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001c3a:	f001 fedd 	bl	80039f8 <vPortExitCritical>
                return pdPASS;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07d      	b.n	8001d3e <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d110      	bne.n	8001c6a <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001c48:	f001 fed6 	bl	80039f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 fbd2 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4601      	mov	r1, r0
 8001c60:	205a      	movs	r0, #90	; 0x5a
 8001c62:	f003 ff2d 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e069      	b.n	8001d3e <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d106      	bne.n	8001c7e <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 f84f 	bl	8002d18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001c7e:	f001 febb 	bl	80039f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001c82:	f000 fd9f 	bl	80027c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001c86:	f001 fe89 	bl	800399c <vPortEnterCritical>
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c96:	d103      	bne.n	8001ca0 <xQueueGenericSend+0x198>
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d103      	bne.n	8001cb6 <xQueueGenericSend+0x1ae>
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cb6:	f001 fe9f 	bl	80039f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cba:	1d3a      	adds	r2, r7, #4
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 f83e 	bl	8002d44 <xTaskCheckForTimeOut>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d124      	bne.n	8001d18 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cd0:	f000 fb02 	bl	80022d8 <prvIsQueueFull>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d018      	beq.n	8001d0c <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cdc:	3310      	adds	r3, #16
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 ff60 	bl	8002ba8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cea:	f000 fa8d 	bl	8002208 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001cee:	f000 fd77 	bl	80027e0 <xTaskResumeAll>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f47f af62 	bne.w	8001bbe <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <xQueueGenericSend+0x240>)
 8001cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f3bf 8f4f 	dsb	sy
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	e758      	b.n	8001bbe <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d0e:	f000 fa7b 	bl	8002208 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001d12:	f000 fd65 	bl	80027e0 <xTaskResumeAll>
 8001d16:	e752      	b.n	8001bbe <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d1a:	f000 fa75 	bl	8002208 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001d1e:	f000 fd5f 	bl	80027e0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fb67 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	460b      	mov	r3, r1
 8001d34:	4601      	mov	r1, r0
 8001d36:	205a      	movs	r0, #90	; 0x5a
 8001d38:	f003 fec2 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8001d3c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3738      	adds	r7, #56	; 0x38
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000ed04 	.word	0xe000ed04

08001d4c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b090      	sub	sp, #64	; 0x40
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <xQueueGenericSendFromISR+0x2c>
 8001d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d76:	e7fe      	b.n	8001d76 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <xQueueGenericSendFromISR+0x3a>
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <xQueueGenericSendFromISR+0x3e>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <xQueueGenericSendFromISR+0x40>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <xQueueGenericSendFromISR+0x58>
 8001d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
 8001da2:	e7fe      	b.n	8001da2 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d103      	bne.n	8001db2 <xQueueGenericSendFromISR+0x66>
 8001daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <xQueueGenericSendFromISR+0x6a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <xQueueGenericSendFromISR+0x6c>
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <xQueueGenericSendFromISR+0x84>
 8001dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc0:	f383 8811 	msr	BASEPRI, r3
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	e7fe      	b.n	8001dce <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001dd0:	f001 fea4 	bl	8003b1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001dd4:	f3ef 8211 	mrs	r2, BASEPRI
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	61fa      	str	r2, [r7, #28]
 8001dea:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001dec:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <xQueueGenericSendFromISR+0xb6>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d147      	bne.n	8001e92 <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 faef 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2060      	movs	r0, #96	; 0x60
 8001e22:	f003 fd7d 	bl	8005920 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e2c:	f000 f95c 	bl	80020e8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001e30:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d112      	bne.n	8001e60 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d024      	beq.n	8001e8c <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e44:	3324      	adds	r3, #36	; 0x24
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 ff00 	bl	8002c4c <xTaskRemoveFromEventList>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01c      	beq.n	8001e8c <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d019      	beq.n	8001e8c <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e015      	b.n	8001e8c <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001e60:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001e64:	2b7f      	cmp	r3, #127	; 0x7f
 8001e66:	d109      	bne.n	8001e7c <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e7fe      	b.n	8001e7a <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	b25a      	sxtb	r2, r3
 8001e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001e90:	e00b      	b.n	8001eaa <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 faaf 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2060      	movs	r0, #96	; 0x60
 8001ea2:	f003 fd3d 	bl	8005920 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eac:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3740      	adds	r7, #64	; 0x40
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b08f      	sub	sp, #60	; 0x3c
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <xQueueReceive+0x2e>
        __asm volatile
 8001eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ede:	f383 8811 	msr	BASEPRI, r3
 8001ee2:	f3bf 8f6f 	isb	sy
 8001ee6:	f3bf 8f4f 	dsb	sy
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	e7fe      	b.n	8001eec <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <xQueueReceive+0x3c>
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <xQueueReceive+0x40>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <xQueueReceive+0x42>
 8001f00:	2300      	movs	r3, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <xQueueReceive+0x5a>
 8001f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	e7fe      	b.n	8001f18 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f1a:	f001 f831 	bl	8002f80 <xTaskGetSchedulerState>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <xQueueReceive+0x6a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <xQueueReceive+0x6e>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <xQueueReceive+0x70>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <xQueueReceive+0x88>
 8001f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f38:	f383 8811 	msr	BASEPRI, r3
 8001f3c:	f3bf 8f6f 	isb	sy
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	e7fe      	b.n	8001f46 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001f48:	f001 fd28 	bl	800399c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d031      	beq.n	8001fbc <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f5c:	f000 f92e 	bl	80021bc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 fa48 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001f68:	4604      	mov	r4, r0
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f004 fa44 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001f70:	4601      	mov	r1, r0
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	2301      	movs	r3, #1
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	205c      	movs	r0, #92	; 0x5c
 8001f80:	f003 fd9e 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	1e5a      	subs	r2, r3, #1
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00f      	beq.n	8001fb4 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	3310      	adds	r3, #16
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fe57 	bl	8002c4c <xTaskRemoveFromEventList>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <xQueueReceive+0x224>)
 8001fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001fb4:	f001 fd20 	bl	80039f8 <vPortExitCritical>
                return pdPASS;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e08e      	b.n	80020da <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d115      	bne.n	8001fee <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001fc2:	f001 fd19 	bl	80039f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fa15 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001fce:	4604      	mov	r4, r0
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f004 fa11 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	205c      	movs	r0, #92	; 0x5c
 8001fe6:	f003 fd6b 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e075      	b.n	80020da <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d106      	bne.n	8002002 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fe8d 	bl	8002d18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002002:	f001 fcf9 	bl	80039f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002006:	f000 fbdd 	bl	80027c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800200a:	f001 fcc7 	bl	800399c <vPortEnterCritical>
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002014:	b25b      	sxtb	r3, r3
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201a:	d103      	bne.n	8002024 <xQueueReceive+0x164>
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800202a:	b25b      	sxtb	r3, r3
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d103      	bne.n	800203a <xQueueReceive+0x17a>
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800203a:	f001 fcdd 	bl	80039f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800203e:	1d3a      	adds	r2, r7, #4
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fe7c 	bl	8002d44 <xTaskCheckForTimeOut>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d124      	bne.n	800209c <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002054:	f000 f92a 	bl	80022ac <prvIsQueueEmpty>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d018      	beq.n	8002090 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	3324      	adds	r3, #36	; 0x24
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fd9e 	bl	8002ba8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800206c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800206e:	f000 f8cb 	bl	8002208 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002072:	f000 fbb5 	bl	80027e0 <xTaskResumeAll>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f af65 	bne.w	8001f48 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <xQueueReceive+0x224>)
 8002080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f3bf 8f4f 	dsb	sy
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	e75b      	b.n	8001f48 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002092:	f000 f8b9 	bl	8002208 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002096:	f000 fba3 	bl	80027e0 <xTaskResumeAll>
 800209a:	e755      	b.n	8001f48 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800209c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800209e:	f000 f8b3 	bl	8002208 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80020a2:	f000 fb9d 	bl	80027e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020a8:	f000 f900 	bl	80022ac <prvIsQueueEmpty>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f43f af4a 	beq.w	8001f48 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f99e 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 80020bc:	4604      	mov	r4, r0
 80020be:	2000      	movs	r0, #0
 80020c0:	f004 f99a 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 80020c4:	4601      	mov	r1, r0
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	2301      	movs	r3, #1
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	460a      	mov	r2, r1
 80020d0:	4621      	mov	r1, r4
 80020d2:	205c      	movs	r0, #92	; 0x5c
 80020d4:	f003 fcf4 	bl	8005ac0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80020d8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3734      	adds	r7, #52	; 0x34
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	e000ed04 	.word	0xe000ed04

080020e8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d14d      	bne.n	80021aa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 ff52 	bl	8002fbc <xTaskPriorityDisinherit>
 8002118:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e043      	b.n	80021aa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d119      	bne.n	800215c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6858      	ldr	r0, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	461a      	mov	r2, r3
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	f004 fb27 	bl	8006786 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	441a      	add	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	429a      	cmp	r2, r3
 8002150:	d32b      	bcc.n	80021aa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	e026      	b.n	80021aa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68d8      	ldr	r0, [r3, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	461a      	mov	r2, r3
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	f004 fb0d 	bl	8006786 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	425b      	negs	r3, r3
 8002176:	441a      	add	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d207      	bcs.n	8002198 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	425b      	negs	r3, r3
 8002192:	441a      	add	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d105      	bne.n	80021aa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80021b2:	697b      	ldr	r3, [r7, #20]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d018      	beq.n	8002200 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	441a      	add	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d303      	bcc.n	80021f0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68d9      	ldr	r1, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	461a      	mov	r2, r3
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f004 fac3 	bl	8006786 <memcpy>
    }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002210:	f001 fbc4 	bl	800399c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800221a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800221c:	e011      	b.n	8002242 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3324      	adds	r3, #36	; 0x24
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd0e 	bl	8002c4c <xTaskRemoveFromEventList>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002236:	f000 fde9 	bl	8002e0c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3b01      	subs	r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	dce9      	bgt.n	800221e <prvUnlockQueue+0x16>
 800224a:	e000      	b.n	800224e <prvUnlockQueue+0x46>
                        break;
 800224c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002256:	f001 fbcf 	bl	80039f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800225a:	f001 fb9f 	bl	800399c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002264:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002266:	e011      	b.n	800228c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3310      	adds	r3, #16
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fce9 	bl	8002c4c <xTaskRemoveFromEventList>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002280:	f000 fdc4 	bl	8002e0c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002284:	7bbb      	ldrb	r3, [r7, #14]
 8002286:	3b01      	subs	r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800228c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002290:	2b00      	cmp	r3, #0
 8002292:	dce9      	bgt.n	8002268 <prvUnlockQueue+0x60>
 8002294:	e000      	b.n	8002298 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002296:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	22ff      	movs	r2, #255	; 0xff
 800229c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80022a0:	f001 fbaa 	bl	80039f8 <vPortExitCritical>
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80022b4:	f001 fb72 	bl	800399c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80022c0:	2301      	movs	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e001      	b.n	80022ca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80022ca:	f001 fb95 	bl	80039f8 <vPortExitCritical>

    return xReturn;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80022e0:	f001 fb5c 	bl	800399c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d102      	bne.n	80022f6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e001      	b.n	80022fa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80022fa:	f001 fb7d 	bl	80039f8 <vPortExitCritical>

    return xReturn;
 80022fe:	68fb      	ldr	r3, [r7, #12]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e01e      	b.n	8002356 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002318:	4a12      	ldr	r2, [pc, #72]	; (8002364 <vQueueAddToRegistry+0x5c>)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d115      	bne.n	8002350 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002324:	490f      	ldr	r1, [pc, #60]	; (8002364 <vQueueAddToRegistry+0x5c>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800232e:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <vQueueAddToRegistry+0x5c>)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	f004 f85b 	bl	80063f8 <SEGGER_SYSVIEW_ShrinkId>
 8002342:	4601      	mov	r1, r0
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	2071      	movs	r0, #113	; 0x71
 800234a:	f003 fae9 	bl	8005920 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800234e:	e005      	b.n	800235c <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b07      	cmp	r3, #7
 800235a:	d9dd      	bls.n	8002318 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200043c4 	.word	0x200043c4

08002368 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002378:	f001 fb10 	bl	800399c <vPortEnterCritical>
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002382:	b25b      	sxtb	r3, r3
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d103      	bne.n	8002392 <vQueueWaitForMessageRestricted+0x2a>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d103      	bne.n	80023a8 <vQueueWaitForMessageRestricted+0x40>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023a8:	f001 fb26 	bl	80039f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3324      	adds	r3, #36	; 0x24
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fc17 	bl	8002bf0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff20 	bl	8002208 <prvUnlockQueue>
    }
 80023c8:	bf00      	nop
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af04      	add	r7, sp, #16
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 fbd5 	bl	8003b94 <pvPortMalloc>
 80023ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00e      	beq.n	8002410 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023f2:	2058      	movs	r0, #88	; 0x58
 80023f4:	f001 fbce 	bl	8003b94 <pvPortMalloc>
 80023f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
 8002406:	e005      	b.n	8002414 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002408:	6978      	ldr	r0, [r7, #20]
 800240a:	f001 fc9f 	bl	8003d4c <vPortFree>
 800240e:	e001      	b.n	8002414 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d013      	beq.n	8002442 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	2300      	movs	r3, #0
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f80e 	bl	8002452 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002436:	69f8      	ldr	r0, [r7, #28]
 8002438:	f000 f8a0 	bl	800257c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800243c:	2301      	movs	r3, #1
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	e002      	b.n	8002448 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002448:	69bb      	ldr	r3, [r7, #24]
    }
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b088      	sub	sp, #32
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	461a      	mov	r2, r3
 800246a:	21a5      	movs	r1, #165	; 0xa5
 800246c:	f004 f996 	bl	800679c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800247a:	3b01      	subs	r3, #1
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f023 0307 	bic.w	r3, r3, #7
 8002488:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <prvInitialiseNewTask+0x56>
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e7fe      	b.n	80024a6 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01f      	beq.n	80024ee <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e012      	b.n	80024da <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	7819      	ldrb	r1, [r3, #0]
 80024bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	3334      	adds	r3, #52	; 0x34
 80024c4:	460a      	mov	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3301      	adds	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b09      	cmp	r3, #9
 80024de:	d9e9      	bls.n	80024b4 <prvInitialiseNewTask+0x62>
 80024e0:	e000      	b.n	80024e4 <prvInitialiseNewTask+0x92>
            {
                break;
 80024e2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024ec:	e003      	b.n	80024f6 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d901      	bls.n	8002500 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024fc:	2304      	movs	r3, #4
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	2200      	movs	r2, #0
 8002510:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	3304      	adds	r3, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f977 	bl	800180a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	3318      	adds	r3, #24
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f972 	bl	800180a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800252a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	f1c3 0205 	rsb	r2, r3, #5
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	3350      	adds	r3, #80	; 0x50
 8002540:	2204      	movs	r2, #4
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f004 f929 	bl	800679c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	3354      	adds	r3, #84	; 0x54
 800254e:	2201      	movs	r2, #1
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f004 f922 	bl	800679c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	68f9      	ldr	r1, [r7, #12]
 800255c:	69b8      	ldr	r0, [r7, #24]
 800255e:	f001 f92f 	bl	80037c0 <pxPortInitialiseStack>
 8002562:	4602      	mov	r2, r0
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002572:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002574:	bf00      	nop
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800257c:	b5b0      	push	{r4, r5, r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af02      	add	r7, sp, #8
 8002582:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002584:	f001 fa0a 	bl	800399c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <prvAddNewTaskToReadyList+0xfc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	4a3a      	ldr	r2, [pc, #232]	; (8002678 <prvAddNewTaskToReadyList+0xfc>)
 8002590:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <prvAddNewTaskToReadyList+0x100>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800259a:	4a38      	ldr	r2, [pc, #224]	; (800267c <prvAddNewTaskToReadyList+0x100>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <prvAddNewTaskToReadyList+0xfc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d110      	bne.n	80025ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025a8:	f000 fc54 	bl	8002e54 <prvInitialiseTaskLists>
 80025ac:	e00d      	b.n	80025ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025ae:	4b34      	ldr	r3, [pc, #208]	; (8002680 <prvAddNewTaskToReadyList+0x104>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025b6:	4b31      	ldr	r3, [pc, #196]	; (800267c <prvAddNewTaskToReadyList+0x100>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d802      	bhi.n	80025ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025c4:	4a2d      	ldr	r2, [pc, #180]	; (800267c <prvAddNewTaskToReadyList+0x100>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025ca:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <prvAddNewTaskToReadyList+0x108>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <prvAddNewTaskToReadyList+0x108>)
 80025d2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <prvAddNewTaskToReadyList+0x108>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <prvAddNewTaskToReadyList+0x94>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fde1 	bl	80061ac <SEGGER_SYSVIEW_OnTaskCreate>
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	461d      	mov	r5, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461c      	mov	r4, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	1ae3      	subs	r3, r4, r3
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	462b      	mov	r3, r5
 800260c:	f001 fd60 	bl	80040d0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fe4e 	bl	80062b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <prvAddNewTaskToReadyList+0x10c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	4a18      	ldr	r2, [pc, #96]	; (8002688 <prvAddNewTaskToReadyList+0x10c>)
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4a15      	ldr	r2, [pc, #84]	; (800268c <prvAddNewTaskToReadyList+0x110>)
 8002638:	441a      	add	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f7ff f8ee 	bl	8001822 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002646:	f001 f9d7 	bl	80039f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <prvAddNewTaskToReadyList+0x104>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00e      	beq.n	8002670 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <prvAddNewTaskToReadyList+0x100>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <prvAddNewTaskToReadyList+0x114>)
 8002662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bdb0      	pop	{r4, r5, r7, pc}
 8002678:	20000110 	.word	0x20000110
 800267c:	20000038 	.word	0x20000038
 8002680:	2000011c 	.word	0x2000011c
 8002684:	2000012c 	.word	0x2000012c
 8002688:	20000118 	.word	0x20000118
 800268c:	2000003c 	.word	0x2000003c
 8002690:	e000ed04 	.word	0xe000ed04

08002694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01a      	beq.n	80026dc <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <vTaskDelay+0x68>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <vTaskDelay+0x2e>
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	e7fe      	b.n	80026c0 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80026c2:	f000 f87f 	bl	80027c4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	2023      	movs	r0, #35	; 0x23
 80026ca:	f003 f8ed 	bl	80058a8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026ce:	2100      	movs	r1, #0
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fcf1 	bl	80030b8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80026d6:	f000 f883 	bl	80027e0 <xTaskResumeAll>
 80026da:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <vTaskDelay+0x6c>)
 80026e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000138 	.word	0x20000138
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <vTaskStartScheduler+0xa0>)
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	2300      	movs	r3, #0
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2300      	movs	r3, #0
 8002714:	2282      	movs	r2, #130	; 0x82
 8002716:	4924      	ldr	r1, [pc, #144]	; (80027a8 <vTaskStartScheduler+0xa4>)
 8002718:	4824      	ldr	r0, [pc, #144]	; (80027ac <vTaskStartScheduler+0xa8>)
 800271a:	f7ff fe59 	bl	80023d0 <xTaskCreate>
 800271e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d102      	bne.n	800272c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002726:	f000 fd3f 	bl	80031a8 <xTimerCreateTimerTask>
 800272a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d123      	bne.n	800277a <vTaskStartScheduler+0x76>
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <vTaskStartScheduler+0xac>)
 8002746:	f04f 32ff 	mov.w	r2, #4294967295
 800274a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <vTaskStartScheduler+0xb0>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <vTaskStartScheduler+0xb4>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <vTaskStartScheduler+0xb8>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <vTaskStartScheduler+0xa0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d102      	bne.n	800276a <vTaskStartScheduler+0x66>
 8002764:	f003 fd06 	bl	8006174 <SEGGER_SYSVIEW_OnIdle>
 8002768:	e004      	b.n	8002774 <vTaskStartScheduler+0x70>
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <vTaskStartScheduler+0xb8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fd5e 	bl	8006230 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002774:	f001 f8a2 	bl	80038bc <xPortStartScheduler>
 8002778:	e00d      	b.n	8002796 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d109      	bne.n	8002796 <vTaskStartScheduler+0x92>
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	e7fe      	b.n	8002794 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <vTaskStartScheduler+0xbc>)
 8002798:	681b      	ldr	r3, [r3, #0]
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000134 	.word	0x20000134
 80027a8:	080067f8 	.word	0x080067f8
 80027ac:	08002e25 	.word	0x08002e25
 80027b0:	20000130 	.word	0x20000130
 80027b4:	2000011c 	.word	0x2000011c
 80027b8:	20000114 	.word	0x20000114
 80027bc:	20000038 	.word	0x20000038
 80027c0:	2000000c 	.word	0x2000000c

080027c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <vTaskSuspendAll+0x18>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	4a03      	ldr	r2, [pc, #12]	; (80027dc <vTaskSuspendAll+0x18>)
 80027d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000138 	.word	0x20000138

080027e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80027ee:	4b43      	ldr	r3, [pc, #268]	; (80028fc <xTaskResumeAll+0x11c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <xTaskResumeAll+0x2a>
 80027f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	e7fe      	b.n	8002808 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800280a:	f001 f8c7 	bl	800399c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800280e:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <xTaskResumeAll+0x11c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	4a39      	ldr	r2, [pc, #228]	; (80028fc <xTaskResumeAll+0x11c>)
 8002816:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <xTaskResumeAll+0x11c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d165      	bne.n	80028ec <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <xTaskResumeAll+0x120>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d061      	beq.n	80028ec <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002828:	e032      	b.n	8002890 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <xTaskResumeAll+0x124>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3318      	adds	r3, #24
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f84e 	bl	80018d8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3304      	adds	r3, #4
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff f849 	bl	80018d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fd33 	bl	80062b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <xTaskResumeAll+0x128>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <xTaskResumeAll+0x128>)
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4a27      	ldr	r2, [pc, #156]	; (800290c <xTaskResumeAll+0x12c>)
 800286e:	441a      	add	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3304      	adds	r3, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f7fe ffd3 	bl	8001822 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <xTaskResumeAll+0x130>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <xTaskResumeAll+0x134>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <xTaskResumeAll+0x124>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1c8      	bne.n	800282a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800289e:	f000 fb55 	bl	8002f4c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <xTaskResumeAll+0x138>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80028ae:	f000 f857 	bl	8002960 <xTaskIncrementTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <xTaskResumeAll+0x134>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f1      	bne.n	80028ae <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <xTaskResumeAll+0x138>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <xTaskResumeAll+0x134>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80028d8:	2301      	movs	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <xTaskResumeAll+0x13c>)
 80028de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028ec:	f001 f884 	bl	80039f8 <vPortExitCritical>

    return xAlreadyYielded;
 80028f0:	68bb      	ldr	r3, [r7, #8]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000138 	.word	0x20000138
 8002900:	20000110 	.word	0x20000110
 8002904:	200000d0 	.word	0x200000d0
 8002908:	20000118 	.word	0x20000118
 800290c:	2000003c 	.word	0x2000003c
 8002910:	20000038 	.word	0x20000038
 8002914:	20000124 	.word	0x20000124
 8002918:	20000120 	.word	0x20000120
 800291c:	e000ed04 	.word	0xe000ed04

08002920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <xTaskGetTickCount+0x18>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800292c:	687b      	ldr	r3, [r7, #4]
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	20000114 	.word	0x20000114

0800293c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002942:	f001 f8eb 	bl	8003b1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <xTaskGetTickCountFromISR+0x20>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002950:	683b      	ldr	r3, [r7, #0]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000114 	.word	0x20000114

08002960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800296a:	4b50      	ldr	r3, [pc, #320]	; (8002aac <xTaskIncrementTick+0x14c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 8091 	bne.w	8002a96 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002974:	4b4e      	ldr	r3, [pc, #312]	; (8002ab0 <xTaskIncrementTick+0x150>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800297c:	4a4c      	ldr	r2, [pc, #304]	; (8002ab0 <xTaskIncrementTick+0x150>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d11f      	bne.n	80029c8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002988:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <xTaskIncrementTick+0x154>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <xTaskIncrementTick+0x46>
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	e7fe      	b.n	80029a4 <xTaskIncrementTick+0x44>
 80029a6:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <xTaskIncrementTick+0x154>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	4b42      	ldr	r3, [pc, #264]	; (8002ab8 <xTaskIncrementTick+0x158>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a40      	ldr	r2, [pc, #256]	; (8002ab4 <xTaskIncrementTick+0x154>)
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4a40      	ldr	r2, [pc, #256]	; (8002ab8 <xTaskIncrementTick+0x158>)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b40      	ldr	r3, [pc, #256]	; (8002abc <xTaskIncrementTick+0x15c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a3e      	ldr	r2, [pc, #248]	; (8002abc <xTaskIncrementTick+0x15c>)
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	f000 fac2 	bl	8002f4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029c8:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <xTaskIncrementTick+0x160>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d34c      	bcc.n	8002a6c <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <xTaskIncrementTick+0x154>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029dc:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <xTaskIncrementTick+0x160>)
 80029de:	f04f 32ff 	mov.w	r2, #4294967295
 80029e2:	601a      	str	r2, [r3, #0]
                    break;
 80029e4:	e042      	b.n	8002a6c <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <xTaskIncrementTick+0x154>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d203      	bcs.n	8002a06 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029fe:	4a30      	ldr	r2, [pc, #192]	; (8002ac0 <xTaskIncrementTick+0x160>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a04:	e032      	b.n	8002a6c <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe ff64 	bl	80018d8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	3318      	adds	r3, #24
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe ff5b 	bl	80018d8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fc45 	bl	80062b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	2201      	movs	r2, #1
 8002a30:	409a      	lsls	r2, r3
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <xTaskIncrementTick+0x164>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	4a22      	ldr	r2, [pc, #136]	; (8002ac4 <xTaskIncrementTick+0x164>)
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <xTaskIncrementTick+0x168>)
 8002a4a:	441a      	add	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f7fe fee5 	bl	8001822 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <xTaskIncrementTick+0x16c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d3b5      	bcc.n	80029d2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a6a:	e7b2      	b.n	80029d2 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <xTaskIncrementTick+0x16c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	4915      	ldr	r1, [pc, #84]	; (8002ac8 <xTaskIncrementTick+0x168>)
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d901      	bls.n	8002a88 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <xTaskIncrementTick+0x170>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e004      	b.n	8002aa0 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <xTaskIncrementTick+0x174>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <xTaskIncrementTick+0x174>)
 8002a9e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002aa0:	697b      	ldr	r3, [r7, #20]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000138 	.word	0x20000138
 8002ab0:	20000114 	.word	0x20000114
 8002ab4:	200000c8 	.word	0x200000c8
 8002ab8:	200000cc 	.word	0x200000cc
 8002abc:	20000128 	.word	0x20000128
 8002ac0:	20000130 	.word	0x20000130
 8002ac4:	20000118 	.word	0x20000118
 8002ac8:	2000003c 	.word	0x2000003c
 8002acc:	20000038 	.word	0x20000038
 8002ad0:	20000124 	.word	0x20000124
 8002ad4:	20000120 	.word	0x20000120

08002ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <vTaskSwitchContext+0xb8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <vTaskSwitchContext+0xbc>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002aec:	e04c      	b.n	8002b88 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <vTaskSwitchContext+0xbc>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <vTaskSwitchContext+0xc0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	f1c3 031f 	rsb	r3, r3, #31
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	4924      	ldr	r1, [pc, #144]	; (8002b9c <vTaskSwitchContext+0xc4>)
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <vTaskSwitchContext+0x5a>
        __asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	e7fe      	b.n	8002b30 <vTaskSwitchContext+0x58>
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <vTaskSwitchContext+0xc4>)
 8002b3e:	4413      	add	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	3308      	adds	r3, #8
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d104      	bne.n	8002b62 <vTaskSwitchContext+0x8a>
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <vTaskSwitchContext+0xc8>)
 8002b6a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <vTaskSwitchContext+0xc8>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <vTaskSwitchContext+0xcc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d102      	bne.n	8002b7e <vTaskSwitchContext+0xa6>
 8002b78:	f003 fafc 	bl	8006174 <SEGGER_SYSVIEW_OnIdle>
}
 8002b7c:	e004      	b.n	8002b88 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <vTaskSwitchContext+0xc8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 fb54 	bl	8006230 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b88:	bf00      	nop
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000138 	.word	0x20000138
 8002b94:	20000124 	.word	0x20000124
 8002b98:	20000118 	.word	0x20000118
 8002b9c:	2000003c 	.word	0x2000003c
 8002ba0:	20000038 	.word	0x20000038
 8002ba4:	20000134 	.word	0x20000134

08002ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <vTaskPlaceOnEventList+0x24>
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e7fe      	b.n	8002bca <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <vTaskPlaceOnEventList+0x44>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3318      	adds	r3, #24
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7fe fe47 	bl	8001868 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002bda:	2101      	movs	r1, #1
 8002bdc:	6838      	ldr	r0, [r7, #0]
 8002bde:	f000 fa6b 	bl	80030b8 <prvAddCurrentTaskToDelayedList>
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000038 	.word	0x20000038

08002bf0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <vTaskPlaceOnEventListRestricted+0x26>
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e7fe      	b.n	8002c14 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <vTaskPlaceOnEventListRestricted+0x58>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3318      	adds	r3, #24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7fe fdff 	bl	8001822 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002c30:	2024      	movs	r0, #36	; 0x24
 8002c32:	f002 fe1b 	bl	800586c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68b8      	ldr	r0, [r7, #8]
 8002c3a:	f000 fa3d 	bl	80030b8 <prvAddCurrentTaskToDelayedList>
    }
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000038 	.word	0x20000038

08002c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <xTaskRemoveFromEventList+0x2a>
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e7fe      	b.n	8002c74 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	3318      	adds	r3, #24
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fe2c 	bl	80018d8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <xTaskRemoveFromEventList+0xb4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d120      	bne.n	8002cca <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fe23 	bl	80018d8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 fb0d 	bl	80062b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <xTaskRemoveFromEventList+0xb8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <xTaskRemoveFromEventList+0xb8>)
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <xTaskRemoveFromEventList+0xbc>)
 8002cba:	441a      	add	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f7fe fdad 	bl	8001822 <vListInsertEnd>
 8002cc8:	e005      	b.n	8002cd6 <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	3318      	adds	r3, #24
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480e      	ldr	r0, [pc, #56]	; (8002d0c <xTaskRemoveFromEventList+0xc0>)
 8002cd2:	f7fe fda6 	bl	8001822 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <xTaskRemoveFromEventList+0xc4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d905      	bls.n	8002cf0 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <xTaskRemoveFromEventList+0xc8>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e001      	b.n	8002cf4 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002cf4:	697b      	ldr	r3, [r7, #20]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000138 	.word	0x20000138
 8002d04:	20000118 	.word	0x20000118
 8002d08:	2000003c 	.word	0x2000003c
 8002d0c:	200000d0 	.word	0x200000d0
 8002d10:	20000038 	.word	0x20000038
 8002d14:	20000124 	.word	0x20000124

08002d18 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <vTaskInternalSetTimeOutState+0x24>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <vTaskInternalSetTimeOutState+0x28>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	605a      	str	r2, [r3, #4]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000128 	.word	0x20000128
 8002d40:	20000114 	.word	0x20000114

08002d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <xTaskCheckForTimeOut+0x24>
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	e7fe      	b.n	8002d66 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <xTaskCheckForTimeOut+0x3e>
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e7fe      	b.n	8002d80 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002d82:	f000 fe0b 	bl	800399c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002d86:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <xTaskCheckForTimeOut+0xc0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d102      	bne.n	8002da6 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	e026      	b.n	8002df4 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <xTaskCheckForTimeOut+0xc4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d00a      	beq.n	8002dc8 <xTaskCheckForTimeOut+0x84>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d305      	bcc.n	8002dc8 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e015      	b.n	8002df4 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d20b      	bcs.n	8002dea <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	1ad2      	subs	r2, r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff9a 	bl	8002d18 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	e004      	b.n	8002df4 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002df4:	f000 fe00 	bl	80039f8 <vPortExitCritical>

    return xReturn;
 8002df8:	69fb      	ldr	r3, [r7, #28]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000114 	.word	0x20000114
 8002e08:	20000128 	.word	0x20000128

08002e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <vTaskMissedYield+0x14>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000124 	.word	0x20000124

08002e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e2c:	f000 f852 	bl	8002ed4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <prvIdleTask+0x28>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d9f9      	bls.n	8002e2c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <prvIdleTask+0x2c>)
 8002e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e48:	e7f0      	b.n	8002e2c <prvIdleTask+0x8>
 8002e4a:	bf00      	nop
 8002e4c:	2000003c 	.word	0x2000003c
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	e00c      	b.n	8002e7a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <prvInitialiseTaskLists+0x60>)
 8002e6c:	4413      	add	r3, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fcac 	bl	80017cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d9ef      	bls.n	8002e60 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <prvInitialiseTaskLists+0x64>)
 8002e82:	f7fe fca3 	bl	80017cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e86:	480d      	ldr	r0, [pc, #52]	; (8002ebc <prvInitialiseTaskLists+0x68>)
 8002e88:	f7fe fca0 	bl	80017cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e8c:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <prvInitialiseTaskLists+0x6c>)
 8002e8e:	f7fe fc9d 	bl	80017cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002e92:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <prvInitialiseTaskLists+0x70>)
 8002e94:	f7fe fc9a 	bl	80017cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002e98:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <prvInitialiseTaskLists+0x74>)
 8002e9a:	f7fe fc97 	bl	80017cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <prvInitialiseTaskLists+0x78>)
 8002ea0:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <prvInitialiseTaskLists+0x64>)
 8002ea2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <prvInitialiseTaskLists+0x7c>)
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <prvInitialiseTaskLists+0x68>)
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000003c 	.word	0x2000003c
 8002eb8:	200000a0 	.word	0x200000a0
 8002ebc:	200000b4 	.word	0x200000b4
 8002ec0:	200000d0 	.word	0x200000d0
 8002ec4:	200000e4 	.word	0x200000e4
 8002ec8:	200000fc 	.word	0x200000fc
 8002ecc:	200000c8 	.word	0x200000c8
 8002ed0:	200000cc 	.word	0x200000cc

08002ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eda:	e019      	b.n	8002f10 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002edc:	f000 fd5e 	bl	800399c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <prvCheckTasksWaitingTermination+0x4c>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fcf3 	bl	80018d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <prvCheckTasksWaitingTermination+0x50>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <prvCheckTasksWaitingTermination+0x50>)
 8002efa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <prvCheckTasksWaitingTermination+0x54>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <prvCheckTasksWaitingTermination+0x54>)
 8002f04:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f06:	f000 fd77 	bl	80039f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f80e 	bl	8002f2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <prvCheckTasksWaitingTermination+0x54>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e1      	bne.n	8002edc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200000e4 	.word	0x200000e4
 8002f24:	20000110 	.word	0x20000110
 8002f28:	200000f8 	.word	0x200000f8

08002f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 ff07 	bl	8003d4c <vPortFree>
                vPortFree( pxTCB );
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 ff04 	bl	8003d4c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <prvResetNextTaskUnblockTime+0x2c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <prvResetNextTaskUnblockTime+0x30>)
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f62:	e005      	b.n	8002f70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <prvResetNextTaskUnblockTime+0x2c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <prvResetNextTaskUnblockTime+0x30>)
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	200000c8 	.word	0x200000c8
 8002f7c:	20000130 	.word	0x20000130

08002f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <xTaskGetSchedulerState+0x34>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	e008      	b.n	8002fa6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <xTaskGetSchedulerState+0x38>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	e001      	b.n	8002fa6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002fa6:	687b      	ldr	r3, [r7, #4]
    }
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000011c 	.word	0x2000011c
 8002fb8:	20000138 	.word	0x20000138

08002fbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d066      	beq.n	80030a0 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <xTaskPriorityDisinherit+0xf0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d009      	beq.n	8002ff0 <xTaskPriorityDisinherit+0x34>
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e7fe      	b.n	8002fee <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <xTaskPriorityDisinherit+0x50>
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	e7fe      	b.n	800300a <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003010:	1e5a      	subs	r2, r3, #1
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	429a      	cmp	r2, r3
 8003020:	d03e      	beq.n	80030a0 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d13a      	bne.n	80030a0 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	3304      	adds	r3, #4
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fc52 	bl	80018d8 <uxListRemove>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	2201      	movs	r2, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <xTaskPriorityDisinherit+0xf4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4013      	ands	r3, r2
 800304c:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <xTaskPriorityDisinherit+0xf4>)
 800304e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4619      	mov	r1, r3
 8003054:	204a      	movs	r0, #74	; 0x4a
 8003056:	f002 fc27 	bl	80058a8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	f1c3 0205 	rsb	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	2201      	movs	r2, #1
 8003074:	409a      	lsls	r2, r3
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <xTaskPriorityDisinherit+0xf4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	4a0c      	ldr	r2, [pc, #48]	; (80030b0 <xTaskPriorityDisinherit+0xf4>)
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <xTaskPriorityDisinherit+0xf8>)
 800308e:	441a      	add	r2, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7fe fbc3 	bl	8001822 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800309c:	2301      	movs	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80030a0:	697b      	ldr	r3, [r7, #20]
    }
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000038 	.word	0x20000038
 80030b0:	20000118 	.word	0x20000118
 80030b4:	2000003c 	.word	0x2000003c

080030b8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <prvAddCurrentTaskToDelayedList+0xd4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030c8:	4b31      	ldr	r3, [pc, #196]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fc02 	bl	80018d8 <uxListRemove>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	2201      	movs	r2, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <prvAddCurrentTaskToDelayedList+0xdc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4013      	ands	r3, r2
 80030ee:	4a29      	ldr	r2, [pc, #164]	; (8003194 <prvAddCurrentTaskToDelayedList+0xdc>)
 80030f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d110      	bne.n	800311c <prvAddCurrentTaskToDelayedList+0x64>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003100:	4b23      	ldr	r3, [pc, #140]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	211b      	movs	r1, #27
 8003106:	4618      	mov	r0, r3
 8003108:	f003 f916 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3304      	adds	r3, #4
 8003112:	4619      	mov	r1, r3
 8003114:	4820      	ldr	r0, [pc, #128]	; (8003198 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003116:	f7fe fb84 	bl	8001822 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800311a:	e032      	b.n	8003182 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	d20f      	bcs.n	8003154 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2104      	movs	r1, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f003 f8fc 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3304      	adds	r3, #4
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f7fe fb8b 	bl	8001868 <vListInsert>
}
 8003152:	e016      	b.n	8003182 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003154:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2104      	movs	r1, #4
 800315a:	4618      	mov	r0, r3
 800315c:	f003 f8ec 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3304      	adds	r3, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f7fe fb7b 	bl	8001868 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d202      	bcs.n	8003182 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800317c:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <prvAddCurrentTaskToDelayedList+0xec>)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6013      	str	r3, [r2, #0]
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000114 	.word	0x20000114
 8003190:	20000038 	.word	0x20000038
 8003194:	20000118 	.word	0x20000118
 8003198:	200000fc 	.word	0x200000fc
 800319c:	200000cc 	.word	0x200000cc
 80031a0:	200000c8 	.word	0x200000c8
 80031a4:	20000130 	.word	0x20000130

080031a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80031b2:	f000 facf 	bl	8003754 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <xTimerCreateTimerTask+0x54>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <xTimerCreateTimerTask+0x58>)
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	2302      	movs	r3, #2
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031cc:	490d      	ldr	r1, [pc, #52]	; (8003204 <xTimerCreateTimerTask+0x5c>)
 80031ce:	480e      	ldr	r0, [pc, #56]	; (8003208 <xTimerCreateTimerTask+0x60>)
 80031d0:	f7ff f8fe 	bl	80023d0 <xTaskCreate>
 80031d4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <xTimerCreateTimerTask+0x48>
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	e7fe      	b.n	80031ee <xTimerCreateTimerTask+0x46>
        return xReturn;
 80031f0:	687b      	ldr	r3, [r7, #4]
    }
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	2000016c 	.word	0x2000016c
 8003200:	20000170 	.word	0x20000170
 8003204:	08006810 	.word	0x08006810
 8003208:	0800333d 	.word	0x0800333d

0800320c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <xTimerGenericCommand+0x2c>
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	e7fe      	b.n	8003236 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <xTimerGenericCommand+0x94>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02a      	beq.n	8003296 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b05      	cmp	r3, #5
 8003250:	dc18      	bgt.n	8003284 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003252:	f7ff fe95 	bl	8002f80 <xTaskGetSchedulerState>
 8003256:	4603      	mov	r3, r0
 8003258:	2b02      	cmp	r3, #2
 800325a:	d109      	bne.n	8003270 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <xTimerGenericCommand+0x94>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	f107 0114 	add.w	r1, r7, #20
 8003264:	2300      	movs	r3, #0
 8003266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003268:	f7fe fc4e 	bl	8001b08 <xQueueGenericSend>
 800326c:	6278      	str	r0, [r7, #36]	; 0x24
 800326e:	e012      	b.n	8003296 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <xTimerGenericCommand+0x94>)
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	f107 0114 	add.w	r1, r7, #20
 8003278:	2300      	movs	r3, #0
 800327a:	2200      	movs	r2, #0
 800327c:	f7fe fc44 	bl	8001b08 <xQueueGenericSend>
 8003280:	6278      	str	r0, [r7, #36]	; 0x24
 8003282:	e008      	b.n	8003296 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <xTimerGenericCommand+0x94>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	f107 0114 	add.w	r1, r7, #20
 800328c:	2300      	movs	r3, #0
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	f7fe fd5c 	bl	8001d4c <xQueueGenericSendFromISR>
 8003294:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003298:	4618      	mov	r0, r3
 800329a:	3728      	adds	r7, #40	; 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000016c 	.word	0x2000016c

080032a4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <prvProcessExpiredTimer+0x94>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fb0b 	bl	80018d8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d021      	beq.n	8003314 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	18d1      	adds	r1, r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	6978      	ldr	r0, [r7, #20]
 80032de:	f000 f8cf 	bl	8003480 <prvInsertTimerInActiveList>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01e      	beq.n	8003326 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80032e8:	2300      	movs	r3, #0
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	2100      	movs	r1, #0
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f7ff ff8a 	bl	800320c <xTimerGenericCommand>
 80032f8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d112      	bne.n	8003326 <prvProcessExpiredTimer+0x82>
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e7fe      	b.n	8003312 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	b2da      	uxtb	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	6978      	ldr	r0, [r7, #20]
 800332c:	4798      	blx	r3
    }
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000164 	.word	0x20000164

0800333c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f857 	bl	80033fc <prvGetNextExpireTime>
 800334e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4619      	mov	r1, r3
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f803 	bl	8003360 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800335a:	f000 f8d3 	bl	8003504 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800335e:	e7f1      	b.n	8003344 <prvTimerTask+0x8>

08003360 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800336a:	f7ff fa2b 	bl	80027c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800336e:	f107 0308 	add.w	r3, r7, #8
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f864 	bl	8003440 <prvSampleTimeNow>
 8003378:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d130      	bne.n	80033e2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <prvProcessTimerOrBlockTask+0x3c>
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	429a      	cmp	r2, r3
 800338c:	d806      	bhi.n	800339c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800338e:	f7ff fa27 	bl	80027e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff85 	bl	80032a4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800339a:	e024      	b.n	80033e6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <prvProcessTimerOrBlockTask+0x90>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <prvProcessTimerOrBlockTask+0x50>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <prvProcessTimerOrBlockTask+0x52>
 80033b0:	2300      	movs	r3, #0
 80033b2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <prvProcessTimerOrBlockTask+0x94>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4619      	mov	r1, r3
 80033c2:	f7fe ffd1 	bl	8002368 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80033c6:	f7ff fa0b 	bl	80027e0 <xTaskResumeAll>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <prvProcessTimerOrBlockTask+0x98>)
 80033d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	f3bf 8f6f 	isb	sy
    }
 80033e0:	e001      	b.n	80033e6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80033e2:	f7ff f9fd 	bl	80027e0 <xTaskResumeAll>
    }
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000168 	.word	0x20000168
 80033f4:	2000016c 	.word	0x2000016c
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <prvGetNextExpireTime+0x40>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <prvGetNextExpireTime+0x16>
 800340e:	2201      	movs	r2, #1
 8003410:	e000      	b.n	8003414 <prvGetNextExpireTime+0x18>
 8003412:	2200      	movs	r2, #0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <prvGetNextExpireTime+0x40>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e001      	b.n	8003430 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003430:	68fb      	ldr	r3, [r7, #12]
    }
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	20000164 	.word	0x20000164

08003440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003448:	f7ff fa6a 	bl	8002920 <xTaskGetTickCount>
 800344c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <prvSampleTimeNow+0x3c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	429a      	cmp	r2, r3
 8003456:	d205      	bcs.n	8003464 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003458:	f000 f918 	bl	800368c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e002      	b.n	800346a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800346a:	4a04      	ldr	r2, [pc, #16]	; (800347c <prvSampleTimeNow+0x3c>)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003470:	68fb      	ldr	r3, [r7, #12]
    }
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000174 	.word	0x20000174

08003480 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d812      	bhi.n	80034cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e01b      	b.n	80034f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <prvInsertTimerInActiveList+0x7c>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f7fe f9cf 	bl	8001868 <vListInsert>
 80034ca:	e012      	b.n	80034f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d206      	bcs.n	80034e2 <prvInsertTimerInActiveList+0x62>
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d302      	bcc.n	80034e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80034dc:	2301      	movs	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e007      	b.n	80034f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <prvInsertTimerInActiveList+0x80>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3304      	adds	r3, #4
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f7fe f9bb 	bl	8001868 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80034f2:	697b      	ldr	r3, [r7, #20]
    }
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20000168 	.word	0x20000168
 8003500:	20000164 	.word	0x20000164

08003504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	; 0x30
 8003508:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800350a:	e0ac      	b.n	8003666 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f2c0 80a8 	blt.w	8003664 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	3304      	adds	r3, #4
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe f9d7 	bl	80018d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff87 	bl	8003440 <prvSampleTimeNow>
 8003532:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b09      	cmp	r3, #9
 8003538:	f200 8095 	bhi.w	8003666 <prvProcessReceivedCommands+0x162>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <prvProcessReceivedCommands+0x40>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	0800356d 	.word	0x0800356d
 8003548:	0800356d 	.word	0x0800356d
 800354c:	0800356d 	.word	0x0800356d
 8003550:	080035df 	.word	0x080035df
 8003554:	080035f3 	.word	0x080035f3
 8003558:	0800363b 	.word	0x0800363b
 800355c:	0800356d 	.word	0x0800356d
 8003560:	0800356d 	.word	0x0800356d
 8003564:	080035df 	.word	0x080035df
 8003568:	080035f3 	.word	0x080035f3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	18d1      	adds	r1, r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800358c:	f7ff ff78 	bl	8003480 <prvInsertTimerInActiveList>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d067      	beq.n	8003666 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800359c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05c      	beq.n	8003666 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	441a      	add	r2, r3
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035be:	f7ff fe25 	bl	800320c <xTimerGenericCommand>
 80035c2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d14d      	bne.n	8003666 <prvProcessReceivedCommands+0x162>
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	e7fe      	b.n	80035dc <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80035f0:	e039      	b.n	8003666 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <prvProcessReceivedCommands+0x122>
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e7fe      	b.n	8003624 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	18d1      	adds	r1, r2, r3
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003634:	f7ff ff24 	bl	8003480 <prvInsertTimerInActiveList>
                        break;
 8003638:	e015      	b.n	8003666 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d103      	bne.n	8003650 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800364a:	f000 fb7f 	bl	8003d4c <vPortFree>
 800364e:	e00a      	b.n	8003666 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003662:	e000      	b.n	8003666 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003664:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <prvProcessReceivedCommands+0x184>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f107 0108 	add.w	r1, r7, #8
 800366e:	2200      	movs	r2, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe fc25 	bl	8001ec0 <xQueueReceive>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f af47 	bne.w	800350c <prvProcessReceivedCommands+0x8>
        }
    }
 800367e:	bf00      	nop
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2000016c 	.word	0x2000016c

0800368c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003692:	e047      	b.n	8003724 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003694:	4b2d      	ldr	r3, [pc, #180]	; (800374c <prvSwitchTimerLists+0xc0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <prvSwitchTimerLists+0xc0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe f913 	bl	80018d8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d02d      	beq.n	8003724 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d90e      	bls.n	80036f8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <prvSwitchTimerLists+0xc0>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f7fe f8b9 	bl	8001868 <vListInsert>
 80036f6:	e015      	b.n	8003724 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036f8:	2300      	movs	r3, #0
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2300      	movs	r3, #0
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	2100      	movs	r1, #0
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff fd82 	bl	800320c <xTimerGenericCommand>
 8003708:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <prvSwitchTimerLists+0x98>
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	e7fe      	b.n	8003722 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <prvSwitchTimerLists+0xc0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1b2      	bne.n	8003694 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <prvSwitchTimerLists+0xc0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <prvSwitchTimerLists+0xc4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a04      	ldr	r2, [pc, #16]	; (800374c <prvSwitchTimerLists+0xc0>)
 800373a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <prvSwitchTimerLists+0xc4>)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	6013      	str	r3, [r2, #0]
    }
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000164 	.word	0x20000164
 8003750:	20000168 	.word	0x20000168

08003754 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003758:	f000 f920 	bl	800399c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <prvCheckForValidListAndQueue+0x54>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11d      	bne.n	80037a0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003764:	4811      	ldr	r0, [pc, #68]	; (80037ac <prvCheckForValidListAndQueue+0x58>)
 8003766:	f7fe f831 	bl	80017cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800376a:	4811      	ldr	r0, [pc, #68]	; (80037b0 <prvCheckForValidListAndQueue+0x5c>)
 800376c:	f7fe f82e 	bl	80017cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <prvCheckForValidListAndQueue+0x60>)
 8003772:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <prvCheckForValidListAndQueue+0x58>)
 8003774:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <prvCheckForValidListAndQueue+0x64>)
 8003778:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <prvCheckForValidListAndQueue+0x5c>)
 800377a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800377c:	2200      	movs	r2, #0
 800377e:	210c      	movs	r1, #12
 8003780:	200a      	movs	r0, #10
 8003782:	f7fe f93b 	bl	80019fc <xQueueGenericCreate>
 8003786:	4602      	mov	r2, r0
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <prvCheckForValidListAndQueue+0x54>)
 800378a:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <prvCheckForValidListAndQueue+0x54>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <prvCheckForValidListAndQueue+0x54>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4908      	ldr	r1, [pc, #32]	; (80037bc <prvCheckForValidListAndQueue+0x68>)
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fdb4 	bl	8002308 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80037a0:	f000 f92a 	bl	80039f8 <vPortExitCritical>
    }
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	2000016c 	.word	0x2000016c
 80037ac:	2000013c 	.word	0x2000013c
 80037b0:	20000150 	.word	0x20000150
 80037b4:	20000164 	.word	0x20000164
 80037b8:	20000168 	.word	0x20000168
 80037bc:	08006818 	.word	0x08006818

080037c0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3b04      	subs	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3b04      	subs	r3, #4
 80037de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3b04      	subs	r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80037f0:	4a08      	ldr	r2, [pc, #32]	; (8003814 <pxPortInitialiseStack+0x54>)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3b14      	subs	r3, #20
 80037fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3b20      	subs	r3, #32
 8003806:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003808:	68fb      	ldr	r3, [r7, #12]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	08003819 	.word	0x08003819

08003818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <prvTaskExitError+0x4c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d009      	beq.n	8003840 <prvTaskExitError+0x28>
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e7fe      	b.n	800383e <prvTaskExitError+0x26>
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003852:	bf00      	nop
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0fc      	beq.n	8003854 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	20000010 	.word	0x20000010
	...

08003870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <pxCurrentTCBConst2>)
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	6808      	ldr	r0, [r1, #0]
 8003876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800387a:	f380 8809 	msr	PSP, r0
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f380 8811 	msr	BASEPRI, r0
 800388a:	f04e 0e0d 	orr.w	lr, lr, #13
 800388e:	4770      	bx	lr

08003890 <pxCurrentTCBConst2>:
 8003890:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop

08003898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003898:	4806      	ldr	r0, [pc, #24]	; (80038b4 <prvPortStartFirstTask+0x1c>)
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	6800      	ldr	r0, [r0, #0]
 800389e:	f380 8808 	msr	MSP, r0
 80038a2:	b662      	cpsie	i
 80038a4:	b661      	cpsie	f
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	df00      	svc	0
 80038b0:	bf00      	nop
 80038b2:	0000      	.short	0x0000
 80038b4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop

080038bc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <xPortStartScheduler+0xcc>)
 80038c4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	22ff      	movs	r2, #255	; 0xff
 80038d2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <xPortStartScheduler+0xd0>)
 80038e8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038ea:	4b29      	ldr	r3, [pc, #164]	; (8003990 <xPortStartScheduler+0xd4>)
 80038ec:	2207      	movs	r2, #7
 80038ee:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038f0:	e009      	b.n	8003906 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <xPortStartScheduler+0xd4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	4a25      	ldr	r2, [pc, #148]	; (8003990 <xPortStartScheduler+0xd4>)
 80038fa:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	b2db      	uxtb	r3, r3
 8003904:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d0ef      	beq.n	80038f2 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003912:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <xPortStartScheduler+0xd4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f1c3 0307 	rsb	r3, r3, #7
 800391a:	2b04      	cmp	r3, #4
 800391c:	d009      	beq.n	8003932 <xPortStartScheduler+0x76>
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	e7fe      	b.n	8003930 <xPortStartScheduler+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003932:	4b17      	ldr	r3, [pc, #92]	; (8003990 <xPortStartScheduler+0xd4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <xPortStartScheduler+0xd4>)
 800393a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <xPortStartScheduler+0xd4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003944:	4a12      	ldr	r2, [pc, #72]	; (8003990 <xPortStartScheduler+0xd4>)
 8003946:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	b2da      	uxtb	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <xPortStartScheduler+0xd8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <xPortStartScheduler+0xd8>)
 8003956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800395a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <xPortStartScheduler+0xd8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <xPortStartScheduler+0xd8>)
 8003962:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003966:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003968:	f000 f8b6 	bl	8003ad8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <xPortStartScheduler+0xdc>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003972:	f7ff ff91 	bl	8003898 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003976:	f7ff f8af 	bl	8002ad8 <vTaskSwitchContext>
    prvTaskExitError();
 800397a:	f7ff ff4d 	bl	8003818 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	e000e400 	.word	0xe000e400
 800398c:	20000178 	.word	0x20000178
 8003990:	2000017c 	.word	0x2000017c
 8003994:	e000ed20 	.word	0xe000ed20
 8003998:	20000010 	.word	0x20000010

0800399c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <vPortEnterCritical+0x54>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <vPortEnterCritical+0x54>)
 80039bc:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <vPortEnterCritical+0x54>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10e      	bne.n	80039e4 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <vPortEnterCritical+0x58>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <vPortEnterCritical+0x48>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	e7fe      	b.n	80039e2 <vPortEnterCritical+0x46>
    }
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000010 	.word	0x20000010
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <vPortExitCritical+0x48>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <vPortExitCritical+0x22>
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	e7fe      	b.n	8003a18 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <vPortExitCritical+0x48>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <vPortExitCritical+0x48>)
 8003a22:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <vPortExitCritical+0x48>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <vPortExitCritical+0x3e>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	20000010 	.word	0x20000010
	...

08003a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003a50:	f3ef 8009 	mrs	r0, PSP
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <pxCurrentTCBConst>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a60:	6010      	str	r0, [r2, #0]
 8003a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a6a:	f380 8811 	msr	BASEPRI, r0
 8003a6e:	f7ff f833 	bl	8002ad8 <vTaskSwitchContext>
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f380 8811 	msr	BASEPRI, r0
 8003a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	6808      	ldr	r0, [r1, #0]
 8003a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a86:	f380 8809 	msr	PSP, r0
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	4770      	bx	lr

08003a90 <pxCurrentTCBConst>:
 8003a90:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop

08003a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
        __asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ab0:	f7fe ff56 	bl	8002960 <xTaskIncrementTick>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <SysTick_Handler+0x3c>)
 8003abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <vPortSetupTimerInterrupt+0x30>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <vPortSetupTimerInterrupt+0x34>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <vPortSetupTimerInterrupt+0x38>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <vPortSetupTimerInterrupt+0x3c>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	099b      	lsrs	r3, r3, #6
 8003af4:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <vPortSetupTimerInterrupt+0x40>)
 8003af6:	3b01      	subs	r3, #1
 8003af8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003afa:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <vPortSetupTimerInterrupt+0x30>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	e000e010 	.word	0xe000e010
 8003b0c:	e000e018 	.word	0xe000e018
 8003b10:	20000000 	.word	0x20000000
 8003b14:	10624dd3 	.word	0x10624dd3
 8003b18:	e000e014 	.word	0xe000e014

08003b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003b22:	f3ef 8305 	mrs	r3, IPSR
 8003b26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	d913      	bls.n	8003b56 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <vPortValidateInterruptPriority+0x68>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <vPortValidateInterruptPriority+0x6c>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	7afa      	ldrb	r2, [r7, #11]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d209      	bcs.n	8003b56 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	e7fe      	b.n	8003b54 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <vPortValidateInterruptPriority+0x70>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <vPortValidateInterruptPriority+0x74>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d909      	bls.n	8003b7a <vPortValidateInterruptPriority+0x5e>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	e7fe      	b.n	8003b78 <vPortValidateInterruptPriority+0x5c>
    }
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	e000e3f0 	.word	0xe000e3f0
 8003b88:	20000178 	.word	0x20000178
 8003b8c:	e000ed0c 	.word	0xe000ed0c
 8003b90:	2000017c 	.word	0x2000017c

08003b94 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003ba0:	f7fe fe10 	bl	80027c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ba4:	4b63      	ldr	r3, [pc, #396]	; (8003d34 <pvPortMalloc+0x1a0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003bac:	f000 f92e 	bl	8003e0c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bb0:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <pvPortMalloc+0x1a4>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f040 80a5 	bne.w	8003d08 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02c      	beq.n	8003c1e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d226      	bcs.n	8003c1e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d020      	beq.n	8003c24 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f023 0307 	bic.w	r3, r3, #7
 8003be8:	3308      	adds	r3, #8
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d213      	bcs.n	8003c18 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f023 0307 	bic.w	r3, r3, #7
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00f      	beq.n	8003c24 <pvPortMalloc+0x90>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e7fe      	b.n	8003c16 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c1c:	e002      	b.n	8003c24 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	e000      	b.n	8003c26 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c24:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d06d      	beq.n	8003d08 <pvPortMalloc+0x174>
 8003c2c:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <pvPortMalloc+0x1a8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d868      	bhi.n	8003d08 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003c36:	4b42      	ldr	r3, [pc, #264]	; (8003d40 <pvPortMalloc+0x1ac>)
 8003c38:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <pvPortMalloc+0x1ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c40:	e004      	b.n	8003c4c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d903      	bls.n	8003c5e <pvPortMalloc+0xca>
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f1      	bne.n	8003c42 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003c5e:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <pvPortMalloc+0x1a0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d04f      	beq.n	8003d08 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	4413      	add	r3, r2
 8003c70:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	1ad2      	subs	r2, r2, r3
 8003c82:	2308      	movs	r3, #8
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d91e      	bls.n	8003cc8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <pvPortMalloc+0x11c>
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	e7fe      	b.n	8003cae <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cc2:	69b8      	ldr	r0, [r7, #24]
 8003cc4:	f000 f904 	bl	8003ed0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <pvPortMalloc+0x1a8>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <pvPortMalloc+0x1a8>)
 8003cd4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <pvPortMalloc+0x1a8>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <pvPortMalloc+0x1b0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d203      	bcs.n	8003cea <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <pvPortMalloc+0x1a8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <pvPortMalloc+0x1b0>)
 8003ce8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <pvPortMalloc+0x1a4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <pvPortMalloc+0x1b4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <pvPortMalloc+0x1b4>)
 8003d06:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003d08:	f7fe fd6a 	bl	80027e0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <pvPortMalloc+0x196>
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e7fe      	b.n	8003d28 <pvPortMalloc+0x194>
    return pvReturn;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3728      	adds	r7, #40	; 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20002988 	.word	0x20002988
 8003d38:	2000299c 	.word	0x2000299c
 8003d3c:	2000298c 	.word	0x2000298c
 8003d40:	20002980 	.word	0x20002980
 8003d44:	20002990 	.word	0x20002990
 8003d48:	20002994 	.word	0x20002994

08003d4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d04b      	beq.n	8003df6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d5e:	2308      	movs	r3, #8
 8003d60:	425b      	negs	r3, r3
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4413      	add	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <vPortFree+0xb4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <vPortFree+0x42>
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e7fe      	b.n	8003d8c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <vPortFree+0x5e>
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	e7fe      	b.n	8003da8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <vPortFree+0xb4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01e      	beq.n	8003df6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11a      	bne.n	8003df6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <vPortFree+0xb4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	401a      	ands	r2, r3
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003dd0:	f7fe fcf8 	bl	80027c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <vPortFree+0xb8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4413      	add	r3, r2
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <vPortFree+0xb8>)
 8003de0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003de2:	6938      	ldr	r0, [r7, #16]
 8003de4:	f000 f874 	bl	8003ed0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <vPortFree+0xbc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	4a06      	ldr	r2, [pc, #24]	; (8003e08 <vPortFree+0xbc>)
 8003df0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003df2:	f7fe fcf5 	bl	80027e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003df6:	bf00      	nop
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000299c 	.word	0x2000299c
 8003e04:	2000298c 	.word	0x2000298c
 8003e08:	20002998 	.word	0x20002998

08003e0c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003e16:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <prvHeapInit+0xac>)
 8003e1a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00c      	beq.n	8003e40 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3307      	adds	r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0307 	bic.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <prvHeapInit+0xac>)
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <prvHeapInit+0xb0>)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <prvHeapInit+0xb0>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	4413      	add	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003e58:	2208      	movs	r2, #8
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0307 	bic.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <prvHeapInit+0xb4>)
 8003e6c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <prvHeapInit+0xb4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <prvHeapInit+0xb4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <prvHeapInit+0xb4>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <prvHeapInit+0xb8>)
 8003e9a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <prvHeapInit+0xbc>)
 8003ea2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <prvHeapInit+0xc0>)
 8003ea6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003eaa:	601a      	str	r2, [r3, #0]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000180 	.word	0x20000180
 8003ebc:	20002980 	.word	0x20002980
 8003ec0:	20002988 	.word	0x20002988
 8003ec4:	20002990 	.word	0x20002990
 8003ec8:	2000298c 	.word	0x2000298c
 8003ecc:	2000299c 	.word	0x2000299c

08003ed0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <prvInsertBlockIntoFreeList+0xa8>)
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e002      	b.n	8003ee4 <prvInsertBlockIntoFreeList+0x14>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d8f7      	bhi.n	8003ede <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	4413      	add	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d108      	bne.n	8003f12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	441a      	add	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	441a      	add	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d118      	bne.n	8003f58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <prvInsertBlockIntoFreeList+0xac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d00d      	beq.n	8003f4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e008      	b.n	8003f60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <prvInsertBlockIntoFreeList+0xac>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e003      	b.n	8003f60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d002      	beq.n	8003f6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	20002980 	.word	0x20002980
 8003f7c:	20002988 	.word	0x20002988

08003f80 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003f84:	4803      	ldr	r0, [pc, #12]	; (8003f94 <_cbSendSystemDesc+0x14>)
 8003f86:	f002 f8a1 	bl	80060cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003f8a:	4803      	ldr	r0, [pc, #12]	; (8003f98 <_cbSendSystemDesc+0x18>)
 8003f8c:	f002 f89e 	bl	80060cc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	08006820 	.word	0x08006820
 8003f98:	08006858 	.word	0x08006858

08003f9c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <SEGGER_SYSVIEW_Conf+0x20>)
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <SEGGER_SYSVIEW_Conf+0x20>)
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <SEGGER_SYSVIEW_Conf+0x24>)
 8003faa:	4a06      	ldr	r2, [pc, #24]	; (8003fc4 <SEGGER_SYSVIEW_Conf+0x28>)
 8003fac:	f001 fc0c 	bl	80057c8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003fb0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003fb4:	f001 fc4c 	bl	8005850 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	08003f81 	.word	0x08003f81
 8003fc4:	080068f4 	.word	0x080068f4

08003fc8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	e034      	b.n	800403e <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003fd4:	491e      	ldr	r1, [pc, #120]	; (8004050 <_cbSendTaskList+0x88>)
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	491a      	ldr	r1, [pc, #104]	; (8004050 <_cbSendTaskList+0x88>)
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	681c      	ldr	r4, [r3, #0]
 8003ff6:	4916      	ldr	r1, [pc, #88]	; (8004050 <_cbSendTaskList+0x88>)
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	3308      	adds	r3, #8
 8004006:	681d      	ldr	r5, [r3, #0]
 8004008:	4911      	ldr	r1, [pc, #68]	; (8004050 <_cbSendTaskList+0x88>)
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	330c      	adds	r3, #12
 8004018:	681e      	ldr	r6, [r3, #0]
 800401a:	490d      	ldr	r1, [pc, #52]	; (8004050 <_cbSendTaskList+0x88>)
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	3310      	adds	r3, #16
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	4633      	mov	r3, r6
 8004030:	462a      	mov	r2, r5
 8004032:	4621      	mov	r1, r4
 8004034:	f000 f8b4 	bl	80041a0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <_cbSendTaskList+0x8c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d3c5      	bcc.n	8003fd4 <_cbSendTaskList+0xc>
  }
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004050:	200029a0 	.word	0x200029a0
 8004054:	20002a40 	.word	0x20002a40

08004058 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800405e:	f7fe fc6d 	bl	800293c <xTaskGetTickCountFromISR>
 8004062:	4603      	mov	r3, r0
 8004064:	f04f 0400 	mov.w	r4, #0
 8004068:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800406c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004070:	462b      	mov	r3, r5
 8004072:	4634      	mov	r4, r6
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	0162      	lsls	r2, r4, #5
 800407e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004082:	0159      	lsls	r1, r3, #5
 8004084:	460b      	mov	r3, r1
 8004086:	4614      	mov	r4, r2
 8004088:	1b5b      	subs	r3, r3, r5
 800408a:	eb64 0406 	sbc.w	r4, r4, r6
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	00a2      	lsls	r2, r4, #2
 8004098:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800409c:	0099      	lsls	r1, r3, #2
 800409e:	460b      	mov	r3, r1
 80040a0:	4614      	mov	r4, r2
 80040a2:	195b      	adds	r3, r3, r5
 80040a4:	eb44 0406 	adc.w	r4, r4, r6
 80040a8:	f04f 0100 	mov.w	r1, #0
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	00e2      	lsls	r2, r4, #3
 80040b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040b6:	00d9      	lsls	r1, r3, #3
 80040b8:	460b      	mov	r3, r1
 80040ba:	4614      	mov	r4, r2
 80040bc:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80040c0:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	4621      	mov	r1, r4
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040d0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80040de:	2205      	movs	r2, #5
 80040e0:	492b      	ldr	r1, [pc, #172]	; (8004190 <SYSVIEW_AddTask+0xc0>)
 80040e2:	68b8      	ldr	r0, [r7, #8]
 80040e4:	f002 fb40 	bl	8006768 <memcmp>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d04b      	beq.n	8004186 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <SYSVIEW_AddTask+0xc4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b07      	cmp	r3, #7
 80040f4:	d903      	bls.n	80040fe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80040f6:	4828      	ldr	r0, [pc, #160]	; (8004198 <SYSVIEW_AddTask+0xc8>)
 80040f8:	f002 fa88 	bl	800660c <SEGGER_SYSVIEW_Warn>
    return;
 80040fc:	e044      	b.n	8004188 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80040fe:	4b25      	ldr	r3, [pc, #148]	; (8004194 <SYSVIEW_AddTask+0xc4>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4926      	ldr	r1, [pc, #152]	; (800419c <SYSVIEW_AddTask+0xcc>)
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <SYSVIEW_AddTask+0xc4>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4921      	ldr	r1, [pc, #132]	; (800419c <SYSVIEW_AddTask+0xcc>)
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	3304      	adds	r3, #4
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <SYSVIEW_AddTask+0xc4>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	491b      	ldr	r1, [pc, #108]	; (800419c <SYSVIEW_AddTask+0xcc>)
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3308      	adds	r3, #8
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <SYSVIEW_AddTask+0xc4>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4916      	ldr	r1, [pc, #88]	; (800419c <SYSVIEW_AddTask+0xcc>)
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	330c      	adds	r3, #12
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <SYSVIEW_AddTask+0xc4>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4910      	ldr	r1, [pc, #64]	; (800419c <SYSVIEW_AddTask+0xcc>)
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	3310      	adds	r3, #16
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <SYSVIEW_AddTask+0xc4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	4a08      	ldr	r2, [pc, #32]	; (8004194 <SYSVIEW_AddTask+0xc4>)
 8004172:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f80e 	bl	80041a0 <SYSVIEW_SendTaskInfo>
 8004184:	e000      	b.n	8004188 <SYSVIEW_AddTask+0xb8>
    return;
 8004186:	bf00      	nop

}
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	08006868 	.word	0x08006868
 8004194:	20002a40 	.word	0x20002a40
 8004198:	08006870 	.word	0x08006870
 800419c:	200029a0 	.word	0x200029a0

080041a0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80041ae:	f107 0310 	add.w	r3, r7, #16
 80041b2:	2218      	movs	r2, #24
 80041b4:	2100      	movs	r1, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f002 faf0 	bl	800679c <memset>
  TaskInfo.TaskID     = TaskID;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80041d0:	f107 0310 	add.w	r3, r7, #16
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 fe81 	bl	8005edc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80041da:	bf00      	nop
 80041dc:	3728      	adds	r7, #40	; 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <__NVIC_EnableIRQ>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	db0b      	blt.n	800420e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	4906      	ldr	r1, [pc, #24]	; (8004218 <__NVIC_EnableIRQ+0x34>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2001      	movs	r0, #1
 8004206:	fa00 f202 	lsl.w	r2, r0, r2
 800420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	; (800426c <__NVIC_SetPriority+0x50>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <_StartSysView>:

} _SVInfo = {0,0,1};



static void _StartSysView(void) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0

  int r;



  r = SEGGER_SYSVIEW_IsStarted();
 8004276:	f002 fa25 	bl	80066c4 <SEGGER_SYSVIEW_IsStarted>
 800427a:	6078      	str	r0, [r7, #4]

  if (r == 0) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <_StartSysView+0x16>

    SEGGER_SYSVIEW_Start();
 8004282:	f001 fcaf 	bl	8005be4 <SEGGER_SYSVIEW_Start>

  }

}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <_cbOnUARTRx>:



static void _cbOnUARTRx(U8 Data) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]

  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <_cbOnUARTRx+0x3c>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d806      	bhi.n	80042b0 <_cbOnUARTRx+0x20>

    _SVInfo.NumBytesHelloRcvd++;
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <_cbOnUARTRx+0x3c>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4b08      	ldr	r3, [pc, #32]	; (80042cc <_cbOnUARTRx+0x3c>)
 80042ac:	701a      	strb	r2, [r3, #0]

    goto Done;
 80042ae:	e009      	b.n	80042c4 <_cbOnUARTRx+0x34>

  }

  _StartSysView();
 80042b0:	f7ff ffde 	bl	8004270 <_StartSysView>

  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <_cbOnUARTRx+0x3c>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4618      	mov	r0, r3
 80042ba:	1dfb      	adds	r3, r7, #7
 80042bc:	2201      	movs	r2, #1
 80042be:	4619      	mov	r1, r3
 80042c0:	f000 fb84 	bl	80049cc <SEGGER_RTT_WriteDownBuffer>

Done:

  return;
 80042c4:	bf00      	nop

}
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000014 	.word	0x20000014

080042d0 <_cbOnUARTTx>:



static int _cbOnUARTTx(U8* pChar) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  int r;



  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <_cbOnUARTTx+0x5c>)
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d80f      	bhi.n	8004300 <_cbOnUARTTx+0x30>

    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <_cbOnUARTTx+0x5c>)
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <_cbOnUARTTx+0x60>)
 80042e8:	5c9a      	ldrb	r2, [r3, r2]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	701a      	strb	r2, [r3, #0]

    _SVInfo.NumBytesHelloSent++;
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <_cbOnUARTTx+0x5c>)
 80042f0:	785b      	ldrb	r3, [r3, #1]
 80042f2:	3301      	adds	r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <_cbOnUARTTx+0x5c>)
 80042f8:	705a      	strb	r2, [r3, #1]

    r = 1;
 80042fa:	2301      	movs	r3, #1
 80042fc:	60fb      	str	r3, [r7, #12]

    goto Done;
 80042fe:	e00f      	b.n	8004320 <_cbOnUARTTx+0x50>

  }

  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <_cbOnUARTTx+0x5c>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fa05 	bl	8004718 <SEGGER_RTT_ReadUpBufferNoLock>
 800430e:	4603      	mov	r3, r0
 8004310:	60fb      	str	r3, [r7, #12]

  if (r < 0) {  // Failed to read from up buffer?
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	da02      	bge.n	800431e <_cbOnUARTTx+0x4e>

    r = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e000      	b.n	8004320 <_cbOnUARTTx+0x50>

  }

Done:
 800431e:	bf00      	nop

  return r;
 8004320:	68fb      	ldr	r3, [r7, #12]

}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000014 	.word	0x20000014
 8004330:	080068fc 	.word	0x080068fc

08004334 <SEGGER_UART_init>:



void SEGGER_UART_init(U32 baud)

{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800433c:	4a04      	ldr	r2, [pc, #16]	; (8004350 <SEGGER_UART_init+0x1c>)
 800433e:	4905      	ldr	r1, [pc, #20]	; (8004354 <SEGGER_UART_init+0x20>)
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f861 	bl	8004408 <HIF_UART_Init>

}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	08004291 	.word	0x08004291
 8004354:	080042d1 	.word	0x080042d1

08004358 <USART2_IRQHandler>:

*/

void USART2_IRQHandler(void);

void USART2_IRQHandler(void) {int UsartStatus;
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0

  int r;



  UsartStatus = USART_SR;                              // Examine status register
 800435e:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <USART2_IRQHandler+0x80>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d011      	beq.n	8004392 <USART2_IRQHandler+0x3a>

    v = USART_RDR;                                      // Read data
 800436e:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <USART2_IRQHandler+0x84>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	71fb      	strb	r3, [r7, #7]

    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f003 030b 	and.w	r3, r3, #11
 800437c:	2b00      	cmp	r3, #0
 800437e:	d108      	bne.n	8004392 <USART2_IRQHandler+0x3a>

      (void)v;                                         // Avoid warning in BTL

      if (_cbOnRx) {
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <USART2_IRQHandler+0x88>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <USART2_IRQHandler+0x3a>

        _cbOnRx(v);
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <USART2_IRQHandler+0x88>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	79fa      	ldrb	r2, [r7, #7]
 800438e:	4610      	mov	r0, r2
 8004390:	4798      	blx	r3

    }

  }

  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <USART2_IRQHandler+0x7a>

    // Therefore, we need to check if the function pointer is valid.

    //

    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <USART2_IRQHandler+0x8c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <USART2_IRQHandler+0x78>

      return;

    }

    r = _cbOnTx(&v);
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <USART2_IRQHandler+0x8c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1dfa      	adds	r2, r7, #7
 80043aa:	4610      	mov	r0, r2
 80043ac:	4798      	blx	r3
 80043ae:	60b8      	str	r0, [r7, #8]

    if (r == 0) {                          // No more characters to send ?
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <USART2_IRQHandler+0x6c>

      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <USART2_IRQHandler+0x90>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <USART2_IRQHandler+0x90>)
 80043bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e006      	b.n	80043d2 <USART2_IRQHandler+0x7a>

    } else {

      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <USART2_IRQHandler+0x80>)
 80043c6:	681b      	ldr	r3, [r3, #0]

      USART_RDR = v;  // Start transmission by writing to data register (RDR is for TX and RX in stm32f103)
 80043c8:	79fa      	ldrb	r2, [r7, #7]
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <USART2_IRQHandler+0x84>)
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e000      	b.n	80043d2 <USART2_IRQHandler+0x7a>
      return;
 80043d0:	bf00      	nop

    }

  }

}
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40004400 	.word	0x40004400
 80043dc:	40004404 	.word	0x40004404
 80043e0:	20002a44 	.word	0x20002a44
 80043e4:	20002a48 	.word	0x20002a48
 80043e8:	4000440c 	.word	0x4000440c

080043ec <HIF_UART_EnableTXEInterrupt>:

*       HIF_UART_EnableTXEInterrupt()

*/

void HIF_UART_EnableTXEInterrupt(void) {
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0

  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <HIF_UART_EnableTXEInterrupt+0x18>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a03      	ldr	r2, [pc, #12]	; (8004404 <HIF_UART_EnableTXEInterrupt+0x18>)
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	6013      	str	r3, [r2, #0]

}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	4000440c 	.word	0x4000440c

08004408 <HIF_UART_Init>:

*       HIF_UART_Init()

*/

void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]

  //

  //RCC_APB2ENR |= 1 << 14;                // Enable LPUART1 clock

  RCC_APB1ENR |= 1 << 17;                // Enable LPUART2 clock
 8004414:	4b2a      	ldr	r3, [pc, #168]	; (80044c0 <HIF_UART_Init+0xb8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <HIF_UART_Init+0xb8>)
 800441a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441e:	6013      	str	r3, [r2, #0]

  RCC_APB2ENR |= 1 << 2;                // Enable IO port A clock
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HIF_UART_Init+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <HIF_UART_Init+0xbc>)
 8004426:	f043 0304 	orr.w	r3, r3, #4
 800442a:	6013      	str	r3, [r2, #0]

  // TX = pin PA 2 --> CRL, posición [11:8]
  GPIO_MODER &= ~(0xF << 8);       // Limpia bits 11:8
 800442c:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <HIF_UART_Init+0xc0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <HIF_UART_Init+0xc0>)
 8004432:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004436:	6013      	str	r3, [r2, #0]
  GPIO_MODER |=  (0xB << 8);       // 1011: MODE = 10 (Output 2 MHz), CNF = 10 (AF push-pull)
 8004438:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HIF_UART_Init+0xc0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <HIF_UART_Init+0xc0>)
 800443e:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 8004442:	6013      	str	r3, [r2, #0]
  // RX = pin PA 3 --> CRL, posición [15:12]
  GPIO_MODER &= ~(0xF << 12);     // Limpia bits 15:12 (PA3)
 8004444:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HIF_UART_Init+0xc0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <HIF_UART_Init+0xc0>)
 800444a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800444e:	6013      	str	r3, [r2, #0]
  GPIO_MODER |=  (0x4 << 12);     // 0100: MODE=00 (input), CNF=01 (floating input)
 8004450:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <HIF_UART_Init+0xc0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <HIF_UART_Init+0xc0>)
 8004456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800445a:	6013      	str	r3, [r2, #0]

  // Initialize USART

  //

  USART_CR1 = 0
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HIF_UART_Init+0xc4>)
 800445e:	f242 022c 	movw	r2, #8236	; 0x202c
 8004462:	601a      	str	r2, [r3, #0]
      | (1 <<  5)                        // RXNEIE = 1; RXNE interrupt enabled
      | (1 <<  3)                        // TE     = 1; Transmitter enabled
      | (1 <<  2)                        // RE     = 1; Receiver enabled
      ;

  USART_CR2 = 0
 8004464:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <HIF_UART_Init+0xc8>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
      | (0 << 12)                        // STOP = 00b; 1 Stop bit
      ;

  USART_CR3 = 0
 800446a:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <HIF_UART_Init+0xcc>)
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	601a      	str	r2, [r3, #0]

  // Set baudrate

  //

  Div = Baudrate*16 ;                       // We use
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	617b      	str	r3, [r7, #20]

  Div = (((UART_BASECLK)) / Div);   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004476:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HIF_UART_Init+0xd0>)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	617b      	str	r3, [r7, #20]

  if (Div > 0xFFF)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d302      	bcc.n	800448e <HIF_UART_Init+0x86>
  {

    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004488:	f640 73ff 	movw	r3, #4095	; 0xfff
 800448c:	617b      	str	r3, [r7, #20]

  }

  if (Div >= 1) {
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HIF_UART_Init+0x96>

    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	4a10      	ldr	r2, [pc, #64]	; (80044dc <HIF_UART_Init+0xd4>)
 800449a:	b29b      	uxth	r3, r3
 800449c:	6013      	str	r3, [r2, #0]

  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC

  //

  _cbOnRx = cbOnRx;
 800449e:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <HIF_UART_Init+0xd8>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6013      	str	r3, [r2, #0]

  _cbOnTx = cbOnTx;
 80044a4:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <HIF_UART_Init+0xdc>)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6013      	str	r3, [r2, #0]



  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80044aa:	2106      	movs	r1, #6
 80044ac:	2026      	movs	r0, #38	; 0x26
 80044ae:	f7ff feb5 	bl	800421c <__NVIC_SetPriority>

  NVIC_EnableIRQ(USART_IRQn);
 80044b2:	2026      	movs	r0, #38	; 0x26
 80044b4:	f7ff fe96 	bl	80041e4 <__NVIC_EnableIRQ>

}
 80044b8:	bf00      	nop
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	4002101c 	.word	0x4002101c
 80044c4:	40021018 	.word	0x40021018
 80044c8:	40010800 	.word	0x40010800
 80044cc:	4000440c 	.word	0x4000440c
 80044d0:	40004410 	.word	0x40004410
 80044d4:	40004414 	.word	0x40004414
 80044d8:	01e84800 	.word	0x01e84800
 80044dc:	40004408 	.word	0x40004408
 80044e0:	20002a44 	.word	0x20002a44
 80044e4:	20002a48 	.word	0x20002a48

080044e8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <_DoInit+0x98>)
 80044f0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80044f2:	22a8      	movs	r2, #168	; 0xa8
 80044f4:	2100      	movs	r1, #0
 80044f6:	6838      	ldr	r0, [r7, #0]
 80044f8:	f002 f950 	bl	800679c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2203      	movs	r2, #3
 8004500:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2203      	movs	r2, #3
 8004506:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <_DoInit+0x9c>)
 800450c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <_DoInit+0xa0>)
 8004512:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800451a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2200      	movs	r2, #0
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2200      	movs	r2, #0
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <_DoInit+0x9c>)
 8004532:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4a15      	ldr	r2, [pc, #84]	; (800458c <_DoInit+0xa4>)
 8004538:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2210      	movs	r2, #16
 800453e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2200      	movs	r2, #0
 800454a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	675a      	str	r2, [r3, #116]	; 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	e00c      	b.n	8004572 <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1c3 030f 	rsb	r3, r3, #15
 800455e:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <_DoInit+0xa8>)
 8004560:	5cd1      	ldrb	r1, [r2, r3]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	460a      	mov	r2, r1
 800456a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3301      	adds	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b0f      	cmp	r3, #15
 8004576:	d9ef      	bls.n	8004558 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20004404 	.word	0x20004404
 8004584:	080068c0 	.word	0x080068c0
 8004588:	20002a4c 	.word	0x20002a4c
 800458c:	20002e4c 	.word	0x20002e4c
 8004590:	08006900 	.word	0x08006900

08004594 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80045a0:	2300      	movs	r3, #0
 80045a2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d905      	bls.n	80045c4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	e007      	b.n	80045d4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	1acb      	subs	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3b01      	subs	r3, #1
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	4293      	cmp	r3, r2
 80045e0:	bf28      	it	cs
 80045e2:	4613      	movcs	r3, r2
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80045e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4293      	cmp	r3, r2
 80045ec:	bf28      	it	cs
 80045ee:	4613      	movcs	r3, r2
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80045fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	6978      	ldr	r0, [r7, #20]
 8004602:	f002 f8c0 	bl	8006786 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004606:	6a3a      	ldr	r2, [r7, #32]
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	4413      	add	r3, r2
 800460c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	4413      	add	r3, r2
 8004614:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	4413      	add	r3, r2
 8004624:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	429a      	cmp	r2, r3
 800462e:	d101      	bne.n	8004634 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1b4      	bne.n	80045aa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004640:	6a3b      	ldr	r3, [r7, #32]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3728      	adds	r7, #40	; 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800464a:	b580      	push	{r7, lr}
 800464c:	b088      	sub	sp, #32
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d90f      	bls.n	800468e <_WriteNoCheck+0x44>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	6938      	ldr	r0, [r7, #16]
 800467e:	f002 f882 	bl	8006786 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	441a      	add	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800468c:	e01d      	b.n	80046ca <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	6938      	ldr	r0, [r7, #16]
 80046a2:	f002 f870 	bl	8006786 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4413      	add	r3, r2
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4619      	mov	r1, r3
 80046be:	6938      	ldr	r0, [r7, #16]
 80046c0:	f002 f861 	bl	8006786 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	60da      	str	r2, [r3, #12]
}
 80046ca:	bf00      	nop
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80046d2:	b480      	push	{r7}
 80046d4:	b087      	sub	sp, #28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d808      	bhi.n	8004700 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad2      	subs	r2, r2, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	3b01      	subs	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	e004      	b.n	800470a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
  }
  return r;
 800470a:	697b      	ldr	r3, [r7, #20]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
	...

08004718 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b08c      	sub	sp, #48	; 0x30
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004724:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004726:	623b      	str	r3, [r7, #32]
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b53      	cmp	r3, #83	; 0x53
 8004730:	d001      	beq.n	8004736 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004732:	f7ff fed9 	bl	80044e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4a37      	ldr	r2, [pc, #220]	; (8004820 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004744:	4413      	add	r3, r2
 8004746:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004758:	2300      	movs	r3, #0
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800475c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	429a      	cmp	r2, r3
 8004762:	d92b      	bls.n	80047bc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4293      	cmp	r3, r2
 8004774:	bf28      	it	cs
 8004776:	4613      	movcs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	4413      	add	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	6939      	ldr	r1, [r7, #16]
 8004788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800478a:	f001 fffc 	bl	8006786 <memcpy>
    NumBytesRead += NumBytesRem;
 800478e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4413      	add	r3, r2
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4413      	add	r3, r2
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4413      	add	r3, r2
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d101      	bne.n	80047bc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bf28      	it	cs
 80047cc:	4613      	movcs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d019      	beq.n	800480a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	4413      	add	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047e6:	f001 ffce 	bl	8006786 <memcpy>
    NumBytesRead += NumBytesRem;
 80047ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4413      	add	r3, r2
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80047f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	4413      	add	r3, r2
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4413      	add	r3, r2
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004814:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004818:	4618      	mov	r0, r3
 800481a:	3730      	adds	r7, #48	; 0x30
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20004404 	.word	0x20004404

08004824 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b08c      	sub	sp, #48	; 0x30
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004830:	4b3e      	ldr	r3, [pc, #248]	; (800492c <SEGGER_RTT_ReadNoLock+0x108>)
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b53      	cmp	r3, #83	; 0x53
 800483c:	d001      	beq.n	8004842 <SEGGER_RTT_ReadNoLock+0x1e>
 800483e:	f7ff fe53 	bl	80044e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3360      	adds	r3, #96	; 0x60
 800484e:	4a37      	ldr	r2, [pc, #220]	; (800492c <SEGGER_RTT_ReadNoLock+0x108>)
 8004850:	4413      	add	r3, r2
 8004852:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d92b      	bls.n	80048c8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4293      	cmp	r3, r2
 8004880:	bf28      	it	cs
 8004882:	4613      	movcs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	4413      	add	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	6939      	ldr	r1, [r7, #16]
 8004894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004896:	f001 ff76 	bl	8006786 <memcpy>
    NumBytesRead += NumBytesRem;
 800489a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	4413      	add	r3, r2
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4413      	add	r3, r2
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80048b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4413      	add	r3, r2
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d101      	bne.n	80048c8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bf28      	it	cs
 80048d8:	4613      	movcs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	4413      	add	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	6939      	ldr	r1, [r7, #16]
 80048f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f2:	f001 ff48 	bl	8006786 <memcpy>
    NumBytesRead += NumBytesRem;
 80048f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4413      	add	r3, r2
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4413      	add	r3, r2
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800490e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4413      	add	r3, r2
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004920:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004924:	4618      	mov	r0, r3
 8004926:	3730      	adds	r7, #48	; 0x30
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20004404 	.word	0x20004404

08004930 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4613      	mov	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	3360      	adds	r3, #96	; 0x60
 800494c:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 800494e:	4413      	add	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d017      	beq.n	800498a <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 800495a:	2b01      	cmp	r3, #1
 800495c:	d302      	bcc.n	8004964 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 800495e:	2b02      	cmp	r3, #2
 8004960:	d023      	beq.n	80049aa <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 8004962:	e029      	b.n	80049b8 <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004964:	6978      	ldr	r0, [r7, #20]
 8004966:	f7ff feb4 	bl	80046d2 <_GetAvailWriteSpace>
 800496a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d202      	bcs.n	800497a <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 8004974:	2300      	movs	r3, #0
 8004976:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004978:	e021      	b.n	80049be <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	6978      	ldr	r0, [r7, #20]
 8004984:	f7ff fe61 	bl	800464a <_WriteNoCheck>
    break;
 8004988:	e019      	b.n	80049be <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800498a:	6978      	ldr	r0, [r7, #20]
 800498c:	f7ff fea1 	bl	80046d2 <_GetAvailWriteSpace>
 8004990:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4293      	cmp	r3, r2
 8004998:	bf28      	it	cs
 800499a:	4613      	movcs	r3, r2
 800499c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	69b9      	ldr	r1, [r7, #24]
 80049a2:	6978      	ldr	r0, [r7, #20]
 80049a4:	f7ff fe51 	bl	800464a <_WriteNoCheck>
    break;
 80049a8:	e009      	b.n	80049be <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	69b9      	ldr	r1, [r7, #24]
 80049ae:	6978      	ldr	r0, [r7, #20]
 80049b0:	f7ff fdf0 	bl	8004594 <_WriteBlocking>
 80049b4:	61f8      	str	r0, [r7, #28]
    break;
 80049b6:	e002      	b.n	80049be <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
    break;
 80049bc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80049be:	69fb      	ldr	r3, [r7, #28]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20004404 	.word	0x20004404

080049cc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b53      	cmp	r3, #83	; 0x53
 80049e4:	d001      	beq.n	80049ea <SEGGER_RTT_WriteDownBuffer+0x1e>
 80049e6:	f7ff fd7f 	bl	80044e8 <_DoInit>
  SEGGER_RTT_LOCK();
 80049ea:	f3ef 8311 	mrs	r3, BASEPRI
 80049ee:	f04f 0120 	mov.w	r1, #32
 80049f2:	f381 8811 	msr	BASEPRI, r1
 80049f6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff ff97 	bl	8004930 <SEGGER_RTT_WriteDownBufferNoLock>
 8004a02:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004a0a:	697b      	ldr	r3, [r7, #20]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20004404 	.word	0x20004404

08004a18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a26:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b53      	cmp	r3, #83	; 0x53
 8004a32:	d001      	beq.n	8004a38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004a34:	f7ff fd58 	bl	80044e8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a38:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3c:	f04f 0120 	mov.w	r1, #32
 8004a40:	f381 8811 	msr	BASEPRI, r1
 8004a44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a46:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8004a48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004a4e:	6939      	ldr	r1, [r7, #16]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	4613      	mov	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	3304      	adds	r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	dbeb      	blt.n	8004a4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004a76:	e000      	b.n	8004a7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004a78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	da3d      	bge.n	8004b00 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004a84:	6939      	ldr	r1, [r7, #16]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	4413      	add	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	440b      	add	r3, r1
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a98:	6939      	ldr	r1, [r7, #16]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	4413      	add	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004aae:	6939      	ldr	r1, [r7, #16]
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	440b      	add	r3, r1
 8004abc:	3320      	adds	r3, #32
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004ac2:	6939      	ldr	r1, [r7, #16]
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	4413      	add	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	440b      	add	r3, r1
 8004ad0:	3328      	adds	r3, #40	; 0x28
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004ad6:	6939      	ldr	r1, [r7, #16]
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	4613      	mov	r3, r2
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4413      	add	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3324      	adds	r3, #36	; 0x24
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004aea:	6939      	ldr	r1, [r7, #16]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	4613      	mov	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	332c      	adds	r3, #44	; 0x2c
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20004404 	.word	0x20004404

08004b1c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8004b2c:	623b      	str	r3, [r7, #32]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b53      	cmp	r3, #83	; 0x53
 8004b36:	d001      	beq.n	8004b3c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004b38:	f7ff fcd6 	bl	80044e8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8004b3e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d82a      	bhi.n	8004b9c <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 8004b46:	f3ef 8311 	mrs	r3, BASEPRI
 8004b4a:	f04f 0120 	mov.w	r1, #32
 8004b4e:	f381 8811 	msr	BASEPRI, r1
 8004b52:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	3360      	adds	r3, #96	; 0x60
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2200      	movs	r2, #0
 8004b88:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	e002      	b.n	8004ba2 <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8004b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3728      	adds	r7, #40	; 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20004404 	.word	0x20004404

08004bb0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	60fa      	str	r2, [r7, #12]
 8004bc6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d90a      	bls.n	8004be4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004bd2:	e007      	b.n	8004be4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	1c53      	adds	r3, r2, #1
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1c59      	adds	r1, r3, #1
 8004bde:	60f9      	str	r1, [r7, #12]
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1e5a      	subs	r2, r3, #1
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <_EncodeStr+0x46>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1ee      	bne.n	8004bd4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004c02:	68fb      	ldr	r3, [r7, #12]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3307      	adds	r3, #7
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c2a:	4b32      	ldr	r3, [pc, #200]	; (8004cf4 <_HandleIncomingPacket+0xd0>)
 8004c2c:	7e1b      	ldrb	r3, [r3, #24]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	1cfb      	adds	r3, r7, #3
 8004c32:	2201      	movs	r2, #1
 8004c34:	4619      	mov	r1, r3
 8004c36:	f7ff fdf5 	bl	8004824 <SEGGER_RTT_ReadNoLock>
 8004c3a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04c      	beq.n	8004cdc <_HandleIncomingPacket+0xb8>
    switch (Cmd) {
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d022      	beq.n	8004c8e <_HandleIncomingPacket+0x6a>
 8004c48:	2b05      	cmp	r3, #5
 8004c4a:	dc0b      	bgt.n	8004c64 <_HandleIncomingPacket+0x40>
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d015      	beq.n	8004c7c <_HandleIncomingPacket+0x58>
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	dc02      	bgt.n	8004c5a <_HandleIncomingPacket+0x36>
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d00e      	beq.n	8004c76 <_HandleIncomingPacket+0x52>
 8004c58:	e033      	b.n	8004cc2 <_HandleIncomingPacket+0x9e>
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d011      	beq.n	8004c82 <_HandleIncomingPacket+0x5e>
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d012      	beq.n	8004c88 <_HandleIncomingPacket+0x64>
 8004c62:	e02e      	b.n	8004cc2 <_HandleIncomingPacket+0x9e>
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	d018      	beq.n	8004c9a <_HandleIncomingPacket+0x76>
 8004c68:	2b07      	cmp	r3, #7
 8004c6a:	db13      	blt.n	8004c94 <_HandleIncomingPacket+0x70>
 8004c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c6e:	d037      	beq.n	8004ce0 <_HandleIncomingPacket+0xbc>
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d015      	beq.n	8004ca0 <_HandleIncomingPacket+0x7c>
 8004c74:	e025      	b.n	8004cc2 <_HandleIncomingPacket+0x9e>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004c76:	f000 ffb5 	bl	8005be4 <SEGGER_SYSVIEW_Start>
      break;
 8004c7a:	e036      	b.n	8004cea <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004c7c:	f001 f86e 	bl	8005d5c <SEGGER_SYSVIEW_Stop>
      break;
 8004c80:	e033      	b.n	8004cea <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004c82:	f001 fa47 	bl	8006114 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004c86:	e030      	b.n	8004cea <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004c88:	f001 fa0c 	bl	80060a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004c8c:	e02d      	b.n	8004cea <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004c8e:	f001 f88b 	bl	8005da8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004c92:	e02a      	b.n	8004cea <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004c94:	f001 fc68 	bl	8006568 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004c98:	e027      	b.n	8004cea <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004c9a:	f001 fc47 	bl	800652c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004c9e:	e024      	b.n	8004cea <_HandleIncomingPacket+0xc6>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <_HandleIncomingPacket+0xd0>)
 8004ca2:	7e1b      	ldrb	r3, [r3, #24]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	1cfb      	adds	r3, r7, #3
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4619      	mov	r1, r3
 8004cac:	f7ff fdba 	bl	8004824 <SEGGER_RTT_ReadNoLock>
 8004cb0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <_HandleIncomingPacket+0xc0>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 fbac 	bl	8006418 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004cc0:	e010      	b.n	8004ce4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da0e      	bge.n	8004ce8 <_HandleIncomingPacket+0xc4>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <_HandleIncomingPacket+0xd0>)
 8004ccc:	7e1b      	ldrb	r3, [r3, #24]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	1cfb      	adds	r3, r7, #3
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f7ff fda5 	bl	8004824 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004cda:	e005      	b.n	8004ce8 <_HandleIncomingPacket+0xc4>
    }
  }
 8004cdc:	bf00      	nop
 8004cde:	e004      	b.n	8004cea <_HandleIncomingPacket+0xc6>
      break;
 8004ce0:	bf00      	nop
 8004ce2:	e002      	b.n	8004cea <_HandleIncomingPacket+0xc6>
      break;
 8004ce4:	bf00      	nop
 8004ce6:	e000      	b.n	8004cea <_HandleIncomingPacket+0xc6>
      break;
 8004ce8:	bf00      	nop
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20004264 	.word	0x20004264

08004cf8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08c      	sub	sp, #48	; 0x30
 8004cfc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004cfe:	2301      	movs	r3, #1
 8004d00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	3301      	adds	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0c:	4b32      	ldr	r3, [pc, #200]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d12:	e00b      	b.n	8004d2c <_TrySendOverflowPacket+0x34>
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	09db      	lsrs	r3, r3, #7
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d30:	d8f0      	bhi.n	8004d14 <_TrySendOverflowPacket+0x1c>
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d42:	4b26      	ldr	r3, [pc, #152]	; (8004ddc <_TrySendOverflowPacket+0xe4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d48:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	e00b      	b.n	8004d74 <_TrySendOverflowPacket+0x7c>
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	6279      	str	r1, [r7, #36]	; 0x24
 8004d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	09db      	lsrs	r3, r3, #7
 8004d72:	623b      	str	r3, [r7, #32]
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2b7f      	cmp	r3, #127	; 0x7f
 8004d78:	d8f0      	bhi.n	8004d5c <_TrySendOverflowPacket+0x64>
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	627a      	str	r2, [r7, #36]	; 0x24
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004d8c:	785b      	ldrb	r3, [r3, #1]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f7fb f9d8 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004da0:	4603      	mov	r3, r0
 8004da2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004da4:	f7ff fb22 	bl	80043ec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004dae:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e004      	b.n	8004dcc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	4a03      	ldr	r2, [pc, #12]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004dca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004dcc:	693b      	ldr	r3, [r7, #16]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3730      	adds	r7, #48	; 0x30
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20004264 	.word	0x20004264
 8004ddc:	e0001004 	.word	0xe0001004

08004de0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004dec:	4b9b      	ldr	r3, [pc, #620]	; (800505c <_SendPacket+0x27c>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d010      	beq.n	8004e16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004df4:	4b99      	ldr	r3, [pc, #612]	; (800505c <_SendPacket+0x27c>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 812b 	beq.w	8005054 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004dfe:	4b97      	ldr	r3, [pc, #604]	; (800505c <_SendPacket+0x27c>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d109      	bne.n	8004e1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004e06:	f7ff ff77 	bl	8004cf8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004e0a:	4b94      	ldr	r3, [pc, #592]	; (800505c <_SendPacket+0x27c>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 8122 	bne.w	8005058 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004e14:	e001      	b.n	8004e1a <_SendPacket+0x3a>
    goto Send;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <_SendPacket+0x3c>
Send:
 8004e1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b1f      	cmp	r3, #31
 8004e20:	d809      	bhi.n	8004e36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e22:	4b8e      	ldr	r3, [pc, #568]	; (800505c <_SendPacket+0x27c>)
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 8117 	bne.w	8005064 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b17      	cmp	r3, #23
 8004e3a:	d807      	bhi.n	8004e4c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e0c4      	b.n	8004fd6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b7f      	cmp	r3, #127	; 0x7f
 8004e58:	d912      	bls.n	8004e80 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	09da      	lsrs	r2, r3, #7
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	3a01      	subs	r2, #1
 8004e72:	60fa      	str	r2, [r7, #12]
 8004e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e006      	b.n	8004e8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b7e      	cmp	r3, #126	; 0x7e
 8004e92:	d807      	bhi.n	8004ea4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e098      	b.n	8004fd6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eaa:	d212      	bcs.n	8004ed2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	09da      	lsrs	r2, r3, #7
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	3a01      	subs	r2, #1
 8004ec4:	60fa      	str	r2, [r7, #12]
 8004ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	e081      	b.n	8004fd6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ed8:	d21d      	bcs.n	8004f16 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	0b9a      	lsrs	r2, r3, #14
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	09db      	lsrs	r3, r3, #7
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	3a01      	subs	r2, #1
 8004ef4:	60fa      	str	r2, [r7, #12]
 8004ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	3a01      	subs	r2, #1
 8004f08:	60fa      	str	r2, [r7, #12]
 8004f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	e05f      	b.n	8004fd6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1c:	d228      	bcs.n	8004f70 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	0d5a      	lsrs	r2, r3, #21
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	0b9b      	lsrs	r3, r3, #14
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	3a01      	subs	r2, #1
 8004f38:	60fa      	str	r2, [r7, #12]
 8004f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	09db      	lsrs	r3, r3, #7
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	60fa      	str	r2, [r7, #12]
 8004f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	3a01      	subs	r2, #1
 8004f62:	60fa      	str	r2, [r7, #12]
 8004f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e032      	b.n	8004fd6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	0f1a      	lsrs	r2, r3, #28
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0d5b      	lsrs	r3, r3, #21
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	3a01      	subs	r2, #1
 8004f8a:	60fa      	str	r2, [r7, #12]
 8004f8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0b9b      	lsrs	r3, r3, #14
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	3a01      	subs	r2, #1
 8004fa0:	60fa      	str	r2, [r7, #12]
 8004fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	09db      	lsrs	r3, r3, #7
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	60fa      	str	r2, [r7, #12]
 8004fb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	60fa      	str	r2, [r7, #12]
 8004fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fd6:	4b22      	ldr	r3, [pc, #136]	; (8005060 <_SendPacket+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <_SendPacket+0x27c>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	623b      	str	r3, [r7, #32]
 8004fee:	e00b      	b.n	8005008 <_SendPacket+0x228>
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	6279      	str	r1, [r7, #36]	; 0x24
 8004ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	09db      	lsrs	r3, r3, #7
 8005006:	623b      	str	r3, [r7, #32]
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	2b7f      	cmp	r3, #127	; 0x7f
 800500c:	d8f0      	bhi.n	8004ff0 <_SendPacket+0x210>
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	627a      	str	r2, [r7, #36]	; 0x24
 8005014:	6a3a      	ldr	r2, [r7, #32]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <_SendPacket+0x27c>)
 8005020:	785b      	ldrb	r3, [r3, #1]
 8005022:	4618      	mov	r0, r3
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	461a      	mov	r2, r3
 800502c:	68f9      	ldr	r1, [r7, #12]
 800502e:	f7fb f88f 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005032:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005034:	f7ff f9da 	bl	80043ec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800503e:	4a07      	ldr	r2, [pc, #28]	; (800505c <_SendPacket+0x27c>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	60d3      	str	r3, [r2, #12]
 8005044:	e00f      	b.n	8005066 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <_SendPacket+0x27c>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	b2da      	uxtb	r2, r3
 800504e:	4b03      	ldr	r3, [pc, #12]	; (800505c <_SendPacket+0x27c>)
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	e008      	b.n	8005066 <_SendPacket+0x286>
    goto SendDone;
 8005054:	bf00      	nop
 8005056:	e006      	b.n	8005066 <_SendPacket+0x286>
      goto SendDone;
 8005058:	bf00      	nop
 800505a:	e004      	b.n	8005066 <_SendPacket+0x286>
 800505c:	20004264 	.word	0x20004264
 8005060:	e0001004 	.word	0xe0001004
      goto SendDone;
 8005064:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <_SendPacket+0x2d8>)
 8005068:	7e1b      	ldrb	r3, [r3, #24]
 800506a:	4619      	mov	r1, r3
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <_SendPacket+0x2dc>)
 800506e:	460b      	mov	r3, r1
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	440b      	add	r3, r1
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	336c      	adds	r3, #108	; 0x6c
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <_SendPacket+0x2d8>)
 800507e:	7e1b      	ldrb	r3, [r3, #24]
 8005080:	4618      	mov	r0, r3
 8005082:	490e      	ldr	r1, [pc, #56]	; (80050bc <_SendPacket+0x2dc>)
 8005084:	4603      	mov	r3, r0
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4403      	add	r3, r0
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	440b      	add	r3, r1
 800508e:	3370      	adds	r3, #112	; 0x70
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d00b      	beq.n	80050ae <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <_SendPacket+0x2d8>)
 8005098:	789b      	ldrb	r3, [r3, #2]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d107      	bne.n	80050ae <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <_SendPacket+0x2d8>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80050a4:	f7ff fdbe 	bl	8004c24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <_SendPacket+0x2d8>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80050ae:	bf00      	nop
 80050b0:	3728      	adds	r7, #40	; 0x28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20004264 	.word	0x20004264
 80050bc:	20004404 	.word	0x20004404

080050c0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	3301      	adds	r3, #1
 80050d6:	2b80      	cmp	r3, #128	; 0x80
 80050d8:	d80a      	bhi.n	80050f0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	1c59      	adds	r1, r3, #1
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6051      	str	r1, [r2, #4]
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b80      	cmp	r3, #128	; 0x80
 80050f6:	d15a      	bne.n	80051ae <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	e00b      	b.n	8005132 <_StoreChar+0x72>
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	1c59      	adds	r1, r3, #1
 8005122:	6279      	str	r1, [r7, #36]	; 0x24
 8005124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	2b7f      	cmp	r3, #127	; 0x7f
 8005136:	d8f0      	bhi.n	800511a <_StoreChar+0x5a>
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	627a      	str	r2, [r7, #36]	; 0x24
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e00b      	b.n	800516a <_StoreChar+0xaa>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	1c59      	adds	r1, r3, #1
 800515a:	61f9      	str	r1, [r7, #28]
 800515c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	09db      	lsrs	r3, r3, #7
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b7f      	cmp	r3, #127	; 0x7f
 800516e:	d8f0      	bhi.n	8005152 <_StoreChar+0x92>
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	61fa      	str	r2, [r7, #28]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	221a      	movs	r2, #26
 8005186:	6939      	ldr	r1, [r7, #16]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fe29 	bl	8004de0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff fd3b 	bl	8004c0e <_PreparePacket>
 8005198:	4602      	mov	r2, r0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	611a      	str	r2, [r3, #16]
  }
}
 80051ae:	bf00      	nop
 80051b0:	3728      	adds	r7, #40	; 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80051ca:	2301      	movs	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80051d2:	e007      	b.n	80051e4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	623b      	str	r3, [r7, #32]
    Width++;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80051e4:	6a3a      	ldr	r2, [r7, #32]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d2f3      	bcs.n	80051d4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d901      	bls.n	80051f8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11f      	bne.n	8005242 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01c      	beq.n	8005242 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <_PrintUnsigned+0x66>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <_PrintUnsigned+0x66>
        c = '0';
 8005218:	2330      	movs	r3, #48	; 0x30
 800521a:	76fb      	strb	r3, [r7, #27]
 800521c:	e001      	b.n	8005222 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800521e:	2320      	movs	r3, #32
 8005220:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005222:	e007      	b.n	8005234 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	3b01      	subs	r3, #1
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800522a:	7efb      	ldrb	r3, [r7, #27]
 800522c:	4619      	mov	r1, r3
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff ff46 	bl	80050c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <_PrintUnsigned+0x8a>
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	429a      	cmp	r2, r3
 8005240:	d3f0      	bcc.n	8005224 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d903      	bls.n	8005250 <_PrintUnsigned+0x98>
      NumDigits--;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	3b01      	subs	r3, #1
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	e009      	b.n	8005264 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	429a      	cmp	r2, r3
 8005260:	d200      	bcs.n	8005264 <_PrintUnsigned+0xac>
        break;
 8005262:	e005      	b.n	8005270 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	fb02 f303 	mul.w	r3, r2, r3
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800526e:	e7e8      	b.n	8005242 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <_PrintUnsigned+0x128>)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	4413      	add	r3, r2
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff ff14 	bl	80050c0 <_StoreChar>
    Digit /= Base;
 8005298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e3      	bne.n	8005270 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00e      	beq.n	80052d6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052b8:	e006      	b.n	80052c8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	3b01      	subs	r3, #1
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80052c0:	2120      	movs	r1, #32
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff fefc 	bl	80050c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <_PrintUnsigned+0x11e>
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d3f1      	bcc.n	80052ba <_PrintUnsigned+0x102>
      }
    }
  }
}
 80052d6:	bf00      	nop
 80052d8:	3728      	adds	r7, #40	; 0x28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	08006920 	.word	0x08006920

080052e4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bfb8      	it	lt
 80052f8:	425b      	neglt	r3, r3
 80052fa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80052fc:	2301      	movs	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005300:	e007      	b.n	8005312 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	fb92 f3f3 	sdiv	r3, r2, r3
 800530a:	613b      	str	r3, [r7, #16]
    Width++;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3301      	adds	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	429a      	cmp	r2, r3
 8005318:	daf3      	bge.n	8005302 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	429a      	cmp	r2, r3
 8005320:	d901      	bls.n	8005326 <_PrintInt+0x42>
    Width = NumDigits;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <_PrintInt+0x5e>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	db04      	blt.n	800533c <_PrintInt+0x58>
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <_PrintInt+0x5e>
    FieldWidth--;
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	3b01      	subs	r3, #1
 8005340:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <_PrintInt+0x6e>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d016      	beq.n	8005380 <_PrintInt+0x9c>
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d111      	bne.n	8005380 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00e      	beq.n	8005380 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005362:	e006      	b.n	8005372 <_PrintInt+0x8e>
        FieldWidth--;
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	3b01      	subs	r3, #1
 8005368:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800536a:	2120      	movs	r1, #32
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fea7 	bl	80050c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <_PrintInt+0x9c>
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	429a      	cmp	r2, r3
 800537e:	d3f1      	bcc.n	8005364 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	da07      	bge.n	8005396 <_PrintInt+0xb2>
    v = -v;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	425b      	negs	r3, r3
 800538a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800538c:	212d      	movs	r1, #45	; 0x2d
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff fe96 	bl	80050c0 <_StoreChar>
 8005394:	e008      	b.n	80053a8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80053a0:	212b      	movs	r1, #43	; 0x2b
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fe8c 	bl	80050c0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d019      	beq.n	80053e6 <_PrintInt+0x102>
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d114      	bne.n	80053e6 <_PrintInt+0x102>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d111      	bne.n	80053e6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00e      	beq.n	80053e6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053c8:	e006      	b.n	80053d8 <_PrintInt+0xf4>
        FieldWidth--;
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80053d0:	2130      	movs	r1, #48	; 0x30
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff fe74 	bl	80050c0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <_PrintInt+0x102>
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3f1      	bcc.n	80053ca <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7ff fedf 	bl	80051b8 <_PrintUnsigned>
}
 80053fa:	bf00      	nop
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b098      	sub	sp, #96	; 0x60
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005410:	f3ef 8311 	mrs	r3, BASEPRI
 8005414:	f04f 0120 	mov.w	r1, #32
 8005418:	f381 8811 	msr	BASEPRI, r1
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800541e:	48ab      	ldr	r0, [pc, #684]	; (80056cc <_VPrintTarget+0x2c8>)
 8005420:	f7ff fbf5 	bl	8004c0e <_PreparePacket>
 8005424:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005426:	4ba9      	ldr	r3, [pc, #676]	; (80056cc <_VPrintTarget+0x2c8>)
 8005428:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800542a:	2300      	movs	r3, #0
 800542c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	3301      	adds	r3, #1
 8005436:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800544a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 816c 	beq.w	800572c <_VPrintTarget+0x328>
      break;
    }
    if (c == '%') {
 8005454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005458:	2b25      	cmp	r3, #37	; 0x25
 800545a:	f040 8159 	bne.w	8005710 <_VPrintTarget+0x30c>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800545e:	2300      	movs	r3, #0
 8005460:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800546e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005472:	3b23      	subs	r3, #35	; 0x23
 8005474:	2b0d      	cmp	r3, #13
 8005476:	d83f      	bhi.n	80054f8 <_VPrintTarget+0xf4>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <_VPrintTarget+0x7c>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	080054e9 	.word	0x080054e9
 8005484:	080054f9 	.word	0x080054f9
 8005488:	080054f9 	.word	0x080054f9
 800548c:	080054f9 	.word	0x080054f9
 8005490:	080054f9 	.word	0x080054f9
 8005494:	080054f9 	.word	0x080054f9
 8005498:	080054f9 	.word	0x080054f9
 800549c:	080054f9 	.word	0x080054f9
 80054a0:	080054d9 	.word	0x080054d9
 80054a4:	080054f9 	.word	0x080054f9
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054f9 	.word	0x080054f9
 80054b0:	080054f9 	.word	0x080054f9
 80054b4:	080054c9 	.word	0x080054c9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80054b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e01a      	b.n	80054fe <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80054c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ca:	f043 0302 	orr.w	r3, r3, #2
 80054ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e012      	b.n	80054fe <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80054d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e00a      	b.n	80054fe <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80054e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ea:	f043 0308 	orr.w	r3, r3, #8
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e002      	b.n	80054fe <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80054f8:	2300      	movs	r3, #0
 80054fa:	653b      	str	r3, [r7, #80]	; 0x50
 80054fc:	bf00      	nop
        }
      } while (v);
 80054fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1b0      	bne.n	8005466 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005504:	2300      	movs	r3, #0
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005514:	2b2f      	cmp	r3, #47	; 0x2f
 8005516:	d912      	bls.n	800553e <_VPrintTarget+0x13a>
 8005518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800551c:	2b39      	cmp	r3, #57	; 0x39
 800551e:	d80e      	bhi.n	800553e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	461a      	mov	r2, r3
 8005532:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005536:	4413      	add	r3, r2
 8005538:	3b30      	subs	r3, #48	; 0x30
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800553c:	e7e4      	b.n	8005508 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800553e:	2300      	movs	r3, #0
 8005540:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800554a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800554e:	2b2e      	cmp	r3, #46	; 0x2e
 8005550:	d11d      	bne.n	800558e <_VPrintTarget+0x18a>
        sFormat++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005564:	2b2f      	cmp	r3, #47	; 0x2f
 8005566:	d912      	bls.n	800558e <_VPrintTarget+0x18a>
 8005568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800556c:	2b39      	cmp	r3, #57	; 0x39
 800556e:	d80e      	bhi.n	800558e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3301      	adds	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	461a      	mov	r2, r3
 8005582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005586:	4413      	add	r3, r2
 8005588:	3b30      	subs	r3, #48	; 0x30
 800558a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800558c:	e7e4      	b.n	8005558 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005596:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800559a:	2b6c      	cmp	r3, #108	; 0x6c
 800559c:	d003      	beq.n	80055a6 <_VPrintTarget+0x1a2>
 800559e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055a2:	2b68      	cmp	r3, #104	; 0x68
 80055a4:	d107      	bne.n	80055b6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3301      	adds	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80055b4:	e7ef      	b.n	8005596 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80055b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055ba:	2b64      	cmp	r3, #100	; 0x64
 80055bc:	d028      	beq.n	8005610 <_VPrintTarget+0x20c>
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	dc07      	bgt.n	80055d2 <_VPrintTarget+0x1ce>
 80055c2:	2b58      	cmp	r3, #88	; 0x58
 80055c4:	d04a      	beq.n	800565c <_VPrintTarget+0x258>
 80055c6:	2b63      	cmp	r3, #99	; 0x63
 80055c8:	d00f      	beq.n	80055ea <_VPrintTarget+0x1e6>
 80055ca:	2b25      	cmp	r3, #37	; 0x25
 80055cc:	f000 8095 	beq.w	80056fa <_VPrintTarget+0x2f6>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 80055d0:	e09a      	b.n	8005708 <_VPrintTarget+0x304>
      switch (c) {
 80055d2:	2b73      	cmp	r3, #115	; 0x73
 80055d4:	d055      	beq.n	8005682 <_VPrintTarget+0x27e>
 80055d6:	2b73      	cmp	r3, #115	; 0x73
 80055d8:	dc02      	bgt.n	80055e0 <_VPrintTarget+0x1dc>
 80055da:	2b70      	cmp	r3, #112	; 0x70
 80055dc:	d07a      	beq.n	80056d4 <_VPrintTarget+0x2d0>
        break;
 80055de:	e093      	b.n	8005708 <_VPrintTarget+0x304>
      switch (c) {
 80055e0:	2b75      	cmp	r3, #117	; 0x75
 80055e2:	d028      	beq.n	8005636 <_VPrintTarget+0x232>
 80055e4:	2b78      	cmp	r3, #120	; 0x78
 80055e6:	d039      	beq.n	800565c <_VPrintTarget+0x258>
        break;
 80055e8:	e08e      	b.n	8005708 <_VPrintTarget+0x304>
        v = va_arg(*pParamList, int);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1d19      	adds	r1, r3, #4
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6011      	str	r1, [r2, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80055f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80055fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005602:	f107 0310 	add.w	r3, r7, #16
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff fd59 	bl	80050c0 <_StoreChar>
        break;
 800560e:	e07b      	b.n	8005708 <_VPrintTarget+0x304>
        v = va_arg(*pParamList, int);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	1d19      	adds	r1, r3, #4
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6011      	str	r1, [r2, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800561e:	f107 0010 	add.w	r0, r7, #16
 8005622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562c:	220a      	movs	r2, #10
 800562e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005630:	f7ff fe58 	bl	80052e4 <_PrintInt>
        break;
 8005634:	e068      	b.n	8005708 <_VPrintTarget+0x304>
        v = va_arg(*pParamList, int);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	1d19      	adds	r1, r3, #4
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6011      	str	r1, [r2, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005644:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005646:	f107 0010 	add.w	r0, r7, #16
 800564a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	220a      	movs	r2, #10
 8005656:	f7ff fdaf 	bl	80051b8 <_PrintUnsigned>
        break;
 800565a:	e055      	b.n	8005708 <_VPrintTarget+0x304>
        v = va_arg(*pParamList, int);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1d19      	adds	r1, r3, #4
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6011      	str	r1, [r2, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800566a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800566c:	f107 0010 	add.w	r0, r7, #16
 8005670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567a:	2210      	movs	r2, #16
 800567c:	f7ff fd9c 	bl	80051b8 <_PrintUnsigned>
        break;
 8005680:	e042      	b.n	8005708 <_VPrintTarget+0x304>
        s = va_arg(*pParamList, const char*);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	1d19      	adds	r1, r3, #4
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6011      	str	r1, [r2, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <_VPrintTarget+0x296>
          s = "(null)";
 8005696:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <_VPrintTarget+0x2cc>)
 8005698:	643b      	str	r3, [r7, #64]	; 0x40
          c = *s;
 800569a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 80056a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a4:	3301      	adds	r3, #1
 80056a6:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80056a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00b      	beq.n	80056c8 <_VPrintTarget+0x2c4>
         _StoreChar(&BufferDesc, c);
 80056b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fd00 	bl	80050c0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2b7f      	cmp	r3, #127	; 0x7f
 80056c4:	d9e9      	bls.n	800569a <_VPrintTarget+0x296>
        break;
 80056c6:	e01f      	b.n	8005708 <_VPrintTarget+0x304>
            break;
 80056c8:	bf00      	nop
        break;
 80056ca:	e01d      	b.n	8005708 <_VPrintTarget+0x304>
 80056cc:	20004294 	.word	0x20004294
 80056d0:	080068cc 	.word	0x080068cc
        v = va_arg(*pParamList, int);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	1d19      	adds	r1, r3, #4
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80056e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056e4:	f107 0010 	add.w	r0, r7, #16
 80056e8:	2300      	movs	r3, #0
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	2308      	movs	r3, #8
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2308      	movs	r3, #8
 80056f2:	2210      	movs	r2, #16
 80056f4:	f7ff fd60 	bl	80051b8 <_PrintUnsigned>
        break;
 80056f8:	e006      	b.n	8005708 <_VPrintTarget+0x304>
        _StoreChar(&BufferDesc, '%');
 80056fa:	f107 0310 	add.w	r3, r7, #16
 80056fe:	2125      	movs	r1, #37	; 0x25
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fcdd 	bl	80050c0 <_StoreChar>
        break;
 8005706:	bf00      	nop
      }
      sFormat++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e007      	b.n	8005720 <_VPrintTarget+0x31c>
    } else {
      _StoreChar(&BufferDesc, c);
 8005710:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fcd0 	bl	80050c0 <_StoreChar>
    }
  } while (*sFormat);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f ae89 	bne.w	800543c <_VPrintTarget+0x38>
 800572a:	e000      	b.n	800572e <_VPrintTarget+0x32a>
      break;
 800572c:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d041      	beq.n	80057b8 <_VPrintTarget+0x3b4>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	63bb      	str	r3, [r7, #56]	; 0x38
 8005744:	e00b      	b.n	800575e <_VPrintTarget+0x35a>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	b2da      	uxtb	r2, r3
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	1c59      	adds	r1, r3, #1
 800574e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	09db      	lsrs	r3, r3, #7
 800575c:	63bb      	str	r3, [r7, #56]	; 0x38
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b7f      	cmp	r3, #127	; 0x7f
 8005762:	d8f0      	bhi.n	8005746 <_VPrintTarget+0x342>
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	63fa      	str	r2, [r7, #60]	; 0x3c
 800576a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005772:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	2300      	movs	r3, #0
 800577a:	633b      	str	r3, [r7, #48]	; 0x30
 800577c:	e00b      	b.n	8005796 <_VPrintTarget+0x392>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	b2da      	uxtb	r2, r3
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	1c59      	adds	r1, r3, #1
 8005786:	6379      	str	r1, [r7, #52]	; 0x34
 8005788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	09db      	lsrs	r3, r3, #7
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2b7f      	cmp	r3, #127	; 0x7f
 800579a:	d8f0      	bhi.n	800577e <_VPrintTarget+0x37a>
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	637a      	str	r2, [r7, #52]	; 0x34
 80057a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	6979      	ldr	r1, [r7, #20]
 80057b0:	221a      	movs	r2, #26
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fb14 	bl	8004de0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80057be:	bf00      	nop
 80057c0:	3758      	adds	r7, #88	; 0x58
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop

080057c8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057d6:	2300      	movs	r3, #0
 80057d8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80057dc:	4917      	ldr	r1, [pc, #92]	; (800583c <SEGGER_SYSVIEW_Init+0x74>)
 80057de:	4818      	ldr	r0, [pc, #96]	; (8005840 <SEGGER_SYSVIEW_Init+0x78>)
 80057e0:	f7ff f91a 	bl	8004a18 <SEGGER_RTT_AllocUpBuffer>
 80057e4:	4603      	mov	r3, r0
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	4b16      	ldr	r3, [pc, #88]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 80057ea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80057ec:	4b15      	ldr	r3, [pc, #84]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 80057ee:	785a      	ldrb	r2, [r3, #1]
 80057f0:	4b14      	ldr	r3, [pc, #80]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 80057f2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057f4:	4b13      	ldr	r3, [pc, #76]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 80057f6:	7e1b      	ldrb	r3, [r3, #24]
 80057f8:	4618      	mov	r0, r3
 80057fa:	2300      	movs	r3, #0
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2308      	movs	r3, #8
 8005800:	4a11      	ldr	r2, [pc, #68]	; (8005848 <SEGGER_SYSVIEW_Init+0x80>)
 8005802:	490f      	ldr	r1, [pc, #60]	; (8005840 <SEGGER_SYSVIEW_Init+0x78>)
 8005804:	f7ff f98a 	bl	8004b1c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 800580a:	2200      	movs	r2, #0
 800580c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <SEGGER_SYSVIEW_Init+0x84>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 8005814:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005816:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800581c:	4a09      	ldr	r2, [pc, #36]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005822:	4a08      	ldr	r2, [pc, #32]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005828:	4a06      	ldr	r2, [pc, #24]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <SEGGER_SYSVIEW_Init+0x7c>)
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20002e5c 	.word	0x20002e5c
 8005840:	080068d4 	.word	0x080068d4
 8005844:	20004264 	.word	0x20004264
 8005848:	2000425c 	.word	0x2000425c
 800584c:	e0001004 	.word	0xe0001004

08005850 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005858:	4a03      	ldr	r2, [pc, #12]	; (8005868 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6113      	str	r3, [r2, #16]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr
 8005868:	20004264 	.word	0x20004264

0800586c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005874:	f3ef 8311 	mrs	r3, BASEPRI
 8005878:	f04f 0120 	mov.w	r1, #32
 800587c:	f381 8811 	msr	BASEPRI, r1
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	4808      	ldr	r0, [pc, #32]	; (80058a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005884:	f7ff f9c3 	bl	8004c0e <_PreparePacket>
 8005888:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	68b8      	ldr	r0, [r7, #8]
 8005890:	f7ff faa6 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f383 8811 	msr	BASEPRI, r3
}
 800589a:	bf00      	nop
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20004294 	.word	0x20004294

080058a8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058b2:	f3ef 8311 	mrs	r3, BASEPRI
 80058b6:	f04f 0120 	mov.w	r1, #32
 80058ba:	f381 8811 	msr	BASEPRI, r1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	4816      	ldr	r0, [pc, #88]	; (800591c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80058c2:	f7ff f9a4 	bl	8004c0e <_PreparePacket>
 80058c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e00b      	b.n	80058ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	1c59      	adds	r1, r3, #1
 80058de:	61f9      	str	r1, [r7, #28]
 80058e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	09db      	lsrs	r3, r3, #7
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b7f      	cmp	r3, #127	; 0x7f
 80058f2:	d8f0      	bhi.n	80058d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	61fa      	str	r2, [r7, #28]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	6938      	ldr	r0, [r7, #16]
 800590a:	f7ff fa69 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f383 8811 	msr	BASEPRI, r3
}
 8005914:	bf00      	nop
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20004294 	.word	0x20004294

08005920 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b08c      	sub	sp, #48	; 0x30
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800592c:	f3ef 8311 	mrs	r3, BASEPRI
 8005930:	f04f 0120 	mov.w	r1, #32
 8005934:	f381 8811 	msr	BASEPRI, r1
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	4825      	ldr	r0, [pc, #148]	; (80059d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800593c:	f7ff f967 	bl	8004c0e <_PreparePacket>
 8005940:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	62bb      	str	r3, [r7, #40]	; 0x28
 800594e:	e00b      	b.n	8005968 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	1c59      	adds	r1, r3, #1
 8005958:	62f9      	str	r1, [r7, #44]	; 0x2c
 800595a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	09db      	lsrs	r3, r3, #7
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	2b7f      	cmp	r3, #127	; 0x7f
 800596c:	d8f0      	bhi.n	8005950 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	e00b      	b.n	80059a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	1c59      	adds	r1, r3, #1
 8005990:	6279      	str	r1, [r7, #36]	; 0x24
 8005992:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	09db      	lsrs	r3, r3, #7
 800599e:	623b      	str	r3, [r7, #32]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b7f      	cmp	r3, #127	; 0x7f
 80059a4:	d8f0      	bhi.n	8005988 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	627a      	str	r2, [r7, #36]	; 0x24
 80059ac:	6a3a      	ldr	r2, [r7, #32]
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	6979      	ldr	r1, [r7, #20]
 80059ba:	69b8      	ldr	r0, [r7, #24]
 80059bc:	f7ff fa10 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f383 8811 	msr	BASEPRI, r3
}
 80059c6:	bf00      	nop
 80059c8:	3730      	adds	r7, #48	; 0x30
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20004294 	.word	0x20004294

080059d4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80059e2:	f3ef 8311 	mrs	r3, BASEPRI
 80059e6:	f04f 0120 	mov.w	r1, #32
 80059ea:	f381 8811 	msr	BASEPRI, r1
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	4832      	ldr	r0, [pc, #200]	; (8005abc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80059f2:	f7ff f90c 	bl	8004c0e <_PreparePacket>
 80059f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	633b      	str	r3, [r7, #48]	; 0x30
 8005a04:	e00b      	b.n	8005a1e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0c:	1c59      	adds	r1, r3, #1
 8005a0e:	6379      	str	r1, [r7, #52]	; 0x34
 8005a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	09db      	lsrs	r3, r3, #7
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	2b7f      	cmp	r3, #127	; 0x7f
 8005a22:	d8f0      	bhi.n	8005a06 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	637a      	str	r2, [r7, #52]	; 0x34
 8005a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3c:	e00b      	b.n	8005a56 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	1c59      	adds	r1, r3, #1
 8005a46:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	09db      	lsrs	r3, r3, #7
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5a:	d8f0      	bhi.n	8005a3e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	623b      	str	r3, [r7, #32]
 8005a74:	e00b      	b.n	8005a8e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	1c59      	adds	r1, r3, #1
 8005a7e:	6279      	str	r1, [r7, #36]	; 0x24
 8005a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	09db      	lsrs	r3, r3, #7
 8005a8c:	623b      	str	r3, [r7, #32]
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	2b7f      	cmp	r3, #127	; 0x7f
 8005a92:	d8f0      	bhi.n	8005a76 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	627a      	str	r2, [r7, #36]	; 0x24
 8005a9a:	6a3a      	ldr	r2, [r7, #32]
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	6979      	ldr	r1, [r7, #20]
 8005aa8:	69b8      	ldr	r0, [r7, #24]
 8005aaa:	f7ff f999 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f383 8811 	msr	BASEPRI, r3
}
 8005ab4:	bf00      	nop
 8005ab6:	3738      	adds	r7, #56	; 0x38
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20004294 	.word	0x20004294

08005ac0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b090      	sub	sp, #64	; 0x40
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ace:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad2:	f04f 0120 	mov.w	r1, #32
 8005ad6:	f381 8811 	msr	BASEPRI, r1
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	4840      	ldr	r0, [pc, #256]	; (8005be0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005ade:	f7ff f896 	bl	8004c0e <_PreparePacket>
 8005ae2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af0:	e00b      	b.n	8005b0a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	09db      	lsrs	r3, r3, #7
 8005b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0e:	d8f0      	bhi.n	8005af2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
 8005b28:	e00b      	b.n	8005b42 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b30:	1c59      	adds	r1, r3, #1
 8005b32:	6379      	str	r1, [r7, #52]	; 0x34
 8005b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	09db      	lsrs	r3, r3, #7
 8005b40:	633b      	str	r3, [r7, #48]	; 0x30
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	2b7f      	cmp	r3, #127	; 0x7f
 8005b46:	d8f0      	bhi.n	8005b2a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b60:	e00b      	b.n	8005b7a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	09db      	lsrs	r3, r3, #7
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7e:	d8f0      	bhi.n	8005b62 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
 8005b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b96:	623b      	str	r3, [r7, #32]
 8005b98:	e00b      	b.n	8005bb2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	1c59      	adds	r1, r3, #1
 8005ba2:	6279      	str	r1, [r7, #36]	; 0x24
 8005ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	09db      	lsrs	r3, r3, #7
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb6:	d8f0      	bhi.n	8005b9a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bbe:	6a3a      	ldr	r2, [r7, #32]
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	69b8      	ldr	r0, [r7, #24]
 8005bce:	f7ff f907 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f383 8811 	msr	BASEPRI, r3
}
 8005bd8:	bf00      	nop
 8005bda:	3740      	adds	r7, #64	; 0x40
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20004294 	.word	0x20004294

08005be4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08c      	sub	sp, #48	; 0x30
 8005be8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005bea:	4b59      	ldr	r3, [pc, #356]	; (8005d50 <SEGGER_SYSVIEW_Start+0x16c>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bf4:	f04f 0120 	mov.w	r1, #32
 8005bf8:	f381 8811 	msr	BASEPRI, r1
 8005bfc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005bfe:	4b54      	ldr	r3, [pc, #336]	; (8005d50 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	220a      	movs	r2, #10
 8005c04:	4953      	ldr	r1, [pc, #332]	; (8005d54 <SEGGER_SYSVIEW_Start+0x170>)
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fa faa2 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005c12:	f7fe fbeb 	bl	80043ec <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c16:	200a      	movs	r0, #10
 8005c18:	f7ff fe28 	bl	800586c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c20:	f04f 0120 	mov.w	r1, #32
 8005c24:	f381 8811 	msr	BASEPRI, r1
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	484b      	ldr	r0, [pc, #300]	; (8005d58 <SEGGER_SYSVIEW_Start+0x174>)
 8005c2c:	f7fe ffef 	bl	8004c0e <_PreparePacket>
 8005c30:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3a:	4b45      	ldr	r3, [pc, #276]	; (8005d50 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c40:	e00b      	b.n	8005c5a <SEGGER_SYSVIEW_Start+0x76>
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	1c59      	adds	r1, r3, #1
 8005c4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	09db      	lsrs	r3, r3, #7
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5e:	d8f0      	bhi.n	8005c42 <SEGGER_SYSVIEW_Start+0x5e>
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
 8005c74:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	e00b      	b.n	8005c94 <SEGGER_SYSVIEW_Start+0xb0>
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	6279      	str	r1, [r7, #36]	; 0x24
 8005c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	09db      	lsrs	r3, r3, #7
 8005c92:	623b      	str	r3, [r7, #32]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2b7f      	cmp	r3, #127	; 0x7f
 8005c98:	d8f0      	bhi.n	8005c7c <SEGGER_SYSVIEW_Start+0x98>
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca0:	6a3a      	ldr	r2, [r7, #32]
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	61fb      	str	r3, [r7, #28]
 8005cae:	4b28      	ldr	r3, [pc, #160]	; (8005d50 <SEGGER_SYSVIEW_Start+0x16c>)
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	e00b      	b.n	8005cce <SEGGER_SYSVIEW_Start+0xea>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	1c59      	adds	r1, r3, #1
 8005cbe:	61f9      	str	r1, [r7, #28]
 8005cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	09db      	lsrs	r3, r3, #7
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd2:	d8f0      	bhi.n	8005cb6 <SEGGER_SYSVIEW_Start+0xd2>
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	61fa      	str	r2, [r7, #28]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	e00b      	b.n	8005d06 <SEGGER_SYSVIEW_Start+0x122>
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	1c59      	adds	r1, r3, #1
 8005cf6:	6179      	str	r1, [r7, #20]
 8005cf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	09db      	lsrs	r3, r3, #7
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0a:	d8f0      	bhi.n	8005cee <SEGGER_SYSVIEW_Start+0x10a>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	617a      	str	r2, [r7, #20]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d1c:	2218      	movs	r2, #24
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff f85d 	bl	8004de0 <_SendPacket>
      RECORD_END();
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d2c:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d34:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d3a:	f000 f9eb 	bl	8006114 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d3e:	f000 f9b1 	bl	80060a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d42:	f000 fc11 	bl	8006568 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d46:	bf00      	nop
 8005d48:	3730      	adds	r7, #48	; 0x30
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20004264 	.word	0x20004264
 8005d54:	08006914 	.word	0x08006914
 8005d58:	20004294 	.word	0x20004294

08005d5c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d62:	f3ef 8311 	mrs	r3, BASEPRI
 8005d66:	f04f 0120 	mov.w	r1, #32
 8005d6a:	f381 8811 	msr	BASEPRI, r1
 8005d6e:	607b      	str	r3, [r7, #4]
 8005d70:	480b      	ldr	r0, [pc, #44]	; (8005da0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005d72:	f7fe ff4c 	bl	8004c0e <_PreparePacket>
 8005d76:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d80:	220b      	movs	r2, #11
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6838      	ldr	r0, [r7, #0]
 8005d86:	f7ff f82b 	bl	8004de0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f383 8811 	msr	BASEPRI, r3
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20004294 	.word	0x20004294
 8005da4:	20004264 	.word	0x20004264

08005da8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08c      	sub	sp, #48	; 0x30
 8005dac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dae:	f3ef 8311 	mrs	r3, BASEPRI
 8005db2:	f04f 0120 	mov.w	r1, #32
 8005db6:	f381 8811 	msr	BASEPRI, r1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	4845      	ldr	r0, [pc, #276]	; (8005ed4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005dbe:	f7fe ff26 	bl	8004c0e <_PreparePacket>
 8005dc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dcc:	4b42      	ldr	r3, [pc, #264]	; (8005ed8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd2:	e00b      	b.n	8005dec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	1c59      	adds	r1, r3, #1
 8005ddc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	09db      	lsrs	r3, r3, #7
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b7f      	cmp	r3, #127	; 0x7f
 8005df0:	d8f0      	bhi.n	8005dd4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
 8005e06:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	e00b      	b.n	8005e26 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	1c59      	adds	r1, r3, #1
 8005e16:	6279      	str	r1, [r7, #36]	; 0x24
 8005e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	09db      	lsrs	r3, r3, #7
 8005e24:	623b      	str	r3, [r7, #32]
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	2b7f      	cmp	r3, #127	; 0x7f
 8005e2a:	d8f0      	bhi.n	8005e0e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	627a      	str	r2, [r7, #36]	; 0x24
 8005e32:	6a3a      	ldr	r2, [r7, #32]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e00b      	b.n	8005e60 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	1c59      	adds	r1, r3, #1
 8005e50:	61f9      	str	r1, [r7, #28]
 8005e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	09db      	lsrs	r3, r3, #7
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2b7f      	cmp	r3, #127	; 0x7f
 8005e64:	d8f0      	bhi.n	8005e48 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	61fa      	str	r2, [r7, #28]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	e00b      	b.n	8005e98 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	6179      	str	r1, [r7, #20]
 8005e8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	09db      	lsrs	r3, r3, #7
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9c:	d8f0      	bhi.n	8005e80 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	617a      	str	r2, [r7, #20]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005eae:	2218      	movs	r2, #24
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	68b8      	ldr	r0, [r7, #8]
 8005eb4:	f7fe ff94 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ec6:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	4798      	blx	r3
  }
}
 8005ecc:	bf00      	nop
 8005ece:	3730      	adds	r7, #48	; 0x30
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20004294 	.word	0x20004294
 8005ed8:	20004264 	.word	0x20004264

08005edc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b092      	sub	sp, #72	; 0x48
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee8:	f04f 0120 	mov.w	r1, #32
 8005eec:	f381 8811 	msr	BASEPRI, r1
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	486a      	ldr	r0, [pc, #424]	; (800609c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ef4:	f7fe fe8b 	bl	8004c0e <_PreparePacket>
 8005ef8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b66      	ldr	r3, [pc, #408]	; (80060a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f0e:	e00b      	b.n	8005f28 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f16:	1c59      	adds	r1, r3, #1
 8005f18:	6479      	str	r1, [r7, #68]	; 0x44
 8005f1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f24:	09db      	lsrs	r3, r3, #7
 8005f26:	643b      	str	r3, [r7, #64]	; 0x40
 8005f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2c:	d8f0      	bhi.n	8005f10 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	647a      	str	r2, [r7, #68]	; 0x44
 8005f34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f48:	e00b      	b.n	8005f62 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f50:	1c59      	adds	r1, r3, #1
 8005f52:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	09db      	lsrs	r3, r3, #7
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	2b7f      	cmp	r3, #127	; 0x7f
 8005f66:	d8f0      	bhi.n	8005f4a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f76:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	4619      	mov	r1, r3
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7fe fe15 	bl	8004bb0 <_EncodeStr>
 8005f86:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f88:	2209      	movs	r2, #9
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	6938      	ldr	r0, [r7, #16]
 8005f8e:	f7fe ff27 	bl	8004de0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b40      	ldr	r3, [pc, #256]	; (80060a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa6:	e00b      	b.n	8005fc0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	6379      	str	r1, [r7, #52]	; 0x34
 8005fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	09db      	lsrs	r3, r3, #7
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc4:	d8f0      	bhi.n	8005fa8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	637a      	str	r2, [r7, #52]	; 0x34
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	e00b      	b.n	8005ffa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffe:	d8f0      	bhi.n	8005fe2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	e00b      	b.n	8006034 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	1c59      	adds	r1, r3, #1
 8006024:	6279      	str	r1, [r7, #36]	; 0x24
 8006026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	09db      	lsrs	r3, r3, #7
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	2b7f      	cmp	r3, #127	; 0x7f
 8006038:	d8f0      	bhi.n	800601c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	627a      	str	r2, [r7, #36]	; 0x24
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e00b      	b.n	800606e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	1c59      	adds	r1, r3, #1
 800605e:	61f9      	str	r1, [r7, #28]
 8006060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	09db      	lsrs	r3, r3, #7
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b7f      	cmp	r3, #127	; 0x7f
 8006072:	d8f0      	bhi.n	8006056 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006084:	2215      	movs	r2, #21
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	6938      	ldr	r0, [r7, #16]
 800608a:	f7fe fea9 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f383 8811 	msr	BASEPRI, r3
}
 8006094:	bf00      	nop
 8006096:	3748      	adds	r7, #72	; 0x48
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20004294 	.word	0x20004294
 80060a0:	20004264 	.word	0x20004264

080060a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060ba:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4798      	blx	r3
  }
}
 80060c2:	bf00      	nop
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20004264 	.word	0x20004264

080060cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060d4:	f3ef 8311 	mrs	r3, BASEPRI
 80060d8:	f04f 0120 	mov.w	r1, #32
 80060dc:	f381 8811 	msr	BASEPRI, r1
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	480b      	ldr	r0, [pc, #44]	; (8006110 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80060e4:	f7fe fd93 	bl	8004c0e <_PreparePacket>
 80060e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060ea:	2280      	movs	r2, #128	; 0x80
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	6938      	ldr	r0, [r7, #16]
 80060f0:	f7fe fd5e 	bl	8004bb0 <_EncodeStr>
 80060f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80060f6:	220e      	movs	r2, #14
 80060f8:	68f9      	ldr	r1, [r7, #12]
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f7fe fe70 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f383 8811 	msr	BASEPRI, r3
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20004294 	.word	0x20004294

08006114 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800611a:	4b14      	ldr	r3, [pc, #80]	; (800616c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d019      	beq.n	8006156 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d014      	beq.n	8006156 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800612c:	4b0f      	ldr	r3, [pc, #60]	; (800616c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4798      	blx	r3
 8006134:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006138:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800613a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	f04f 0400 	mov.w	r4, #0
 8006146:	0013      	movs	r3, r2
 8006148:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800614a:	461a      	mov	r2, r3
 800614c:	4601      	mov	r1, r0
 800614e:	200d      	movs	r0, #13
 8006150:	f7ff fbe6 	bl	8005920 <SEGGER_SYSVIEW_RecordU32x2>
 8006154:	e005      	b.n	8006162 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4619      	mov	r1, r3
 800615c:	200c      	movs	r0, #12
 800615e:	f7ff fba3 	bl	80058a8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bd90      	pop	{r4, r7, pc}
 800616a:	bf00      	nop
 800616c:	20004264 	.word	0x20004264
 8006170:	e0001004 	.word	0xe0001004

08006174 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800617a:	f3ef 8311 	mrs	r3, BASEPRI
 800617e:	f04f 0120 	mov.w	r1, #32
 8006182:	f381 8811 	msr	BASEPRI, r1
 8006186:	607b      	str	r3, [r7, #4]
 8006188:	4807      	ldr	r0, [pc, #28]	; (80061a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800618a:	f7fe fd40 	bl	8004c0e <_PreparePacket>
 800618e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006190:	2211      	movs	r2, #17
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6838      	ldr	r0, [r7, #0]
 8006196:	f7fe fe23 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f383 8811 	msr	BASEPRI, r3
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20004294 	.word	0x20004294

080061ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061b4:	f3ef 8311 	mrs	r3, BASEPRI
 80061b8:	f04f 0120 	mov.w	r1, #32
 80061bc:	f381 8811 	msr	BASEPRI, r1
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	4819      	ldr	r0, [pc, #100]	; (8006228 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80061c4:	f7fe fd23 	bl	8004c0e <_PreparePacket>
 80061c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061ce:	4b17      	ldr	r3, [pc, #92]	; (800622c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	61fb      	str	r3, [r7, #28]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	e00b      	b.n	80061fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	1c59      	adds	r1, r3, #1
 80061ea:	61f9      	str	r1, [r7, #28]
 80061ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	09db      	lsrs	r3, r3, #7
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b7f      	cmp	r3, #127	; 0x7f
 80061fe:	d8f0      	bhi.n	80061e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	61fa      	str	r2, [r7, #28]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006210:	2208      	movs	r2, #8
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	6938      	ldr	r0, [r7, #16]
 8006216:	f7fe fde3 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f383 8811 	msr	BASEPRI, r3
}
 8006220:	bf00      	nop
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20004294 	.word	0x20004294
 800622c:	20004264 	.word	0x20004264

08006230 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006238:	f3ef 8311 	mrs	r3, BASEPRI
 800623c:	f04f 0120 	mov.w	r1, #32
 8006240:	f381 8811 	msr	BASEPRI, r1
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	4819      	ldr	r0, [pc, #100]	; (80062ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006248:	f7fe fce1 	bl	8004c0e <_PreparePacket>
 800624c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	e00b      	b.n	800627e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	61f9      	str	r1, [r7, #28]
 8006270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	09db      	lsrs	r3, r3, #7
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b7f      	cmp	r3, #127	; 0x7f
 8006282:	d8f0      	bhi.n	8006266 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	61fa      	str	r2, [r7, #28]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006294:	2204      	movs	r2, #4
 8006296:	68f9      	ldr	r1, [r7, #12]
 8006298:	6938      	ldr	r0, [r7, #16]
 800629a:	f7fe fda1 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f383 8811 	msr	BASEPRI, r3
}
 80062a4:	bf00      	nop
 80062a6:	3720      	adds	r7, #32
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20004294 	.word	0x20004294
 80062b0:	20004264 	.word	0x20004264

080062b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062bc:	f3ef 8311 	mrs	r3, BASEPRI
 80062c0:	f04f 0120 	mov.w	r1, #32
 80062c4:	f381 8811 	msr	BASEPRI, r1
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	4819      	ldr	r0, [pc, #100]	; (8006330 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80062cc:	f7fe fc9f 	bl	8004c0e <_PreparePacket>
 80062d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062d6:	4b17      	ldr	r3, [pc, #92]	; (8006334 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e00b      	b.n	8006302 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	1c59      	adds	r1, r3, #1
 80062f2:	61f9      	str	r1, [r7, #28]
 80062f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b7f      	cmp	r3, #127	; 0x7f
 8006306:	d8f0      	bhi.n	80062ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	61fa      	str	r2, [r7, #28]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006318:	2206      	movs	r2, #6
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	6938      	ldr	r0, [r7, #16]
 800631e:	f7fe fd5f 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f383 8811 	msr	BASEPRI, r3
}
 8006328:	bf00      	nop
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20004294 	.word	0x20004294
 8006334:	20004264 	.word	0x20004264

08006338 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006342:	f3ef 8311 	mrs	r3, BASEPRI
 8006346:	f04f 0120 	mov.w	r1, #32
 800634a:	f381 8811 	msr	BASEPRI, r1
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	4827      	ldr	r0, [pc, #156]	; (80063f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006352:	f7fe fc5c 	bl	8004c0e <_PreparePacket>
 8006356:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	623b      	str	r3, [r7, #32]
 800636e:	e00b      	b.n	8006388 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	b2da      	uxtb	r2, r3
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	1c59      	adds	r1, r3, #1
 8006378:	6279      	str	r1, [r7, #36]	; 0x24
 800637a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	09db      	lsrs	r3, r3, #7
 8006386:	623b      	str	r3, [r7, #32]
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	2b7f      	cmp	r3, #127	; 0x7f
 800638c:	d8f0      	bhi.n	8006370 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	627a      	str	r2, [r7, #36]	; 0x24
 8006394:	6a3a      	ldr	r2, [r7, #32]
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	e00b      	b.n	80063c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	1c59      	adds	r1, r3, #1
 80063b0:	61f9      	str	r1, [r7, #28]
 80063b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	09db      	lsrs	r3, r3, #7
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b7f      	cmp	r3, #127	; 0x7f
 80063c4:	d8f0      	bhi.n	80063a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	61fa      	str	r2, [r7, #28]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80063d6:	2207      	movs	r2, #7
 80063d8:	68f9      	ldr	r1, [r7, #12]
 80063da:	6938      	ldr	r0, [r7, #16]
 80063dc:	f7fe fd00 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f383 8811 	msr	BASEPRI, r3
}
 80063e6:	bf00      	nop
 80063e8:	3728      	adds	r7, #40	; 0x28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20004294 	.word	0x20004294
 80063f4:	20004264 	.word	0x20004264

080063f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006400:	4b04      	ldr	r3, [pc, #16]	; (8006414 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	1ad3      	subs	r3, r2, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20004264 	.word	0x20004264

08006418 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	; 0x30
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006422:	4b40      	ldr	r3, [pc, #256]	; (8006524 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d077      	beq.n	800651a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800642a:	4b3e      	ldr	r3, [pc, #248]	; (8006524 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006430:	2300      	movs	r3, #0
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
 8006434:	e008      	b.n	8006448 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	3301      	adds	r3, #1
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800644c:	429a      	cmp	r2, r3
 800644e:	d3f2      	bcc.n	8006436 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006450:	e000      	b.n	8006454 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006452:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d055      	beq.n	8006506 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800645a:	f3ef 8311 	mrs	r3, BASEPRI
 800645e:	f04f 0120 	mov.w	r1, #32
 8006462:	f381 8811 	msr	BASEPRI, r1
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	482f      	ldr	r0, [pc, #188]	; (8006528 <SEGGER_SYSVIEW_SendModule+0x110>)
 800646a:	f7fe fbd0 	bl	8004c0e <_PreparePacket>
 800646e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	623b      	str	r3, [r7, #32]
 800647c:	e00b      	b.n	8006496 <SEGGER_SYSVIEW_SendModule+0x7e>
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	1c59      	adds	r1, r3, #1
 8006486:	6279      	str	r1, [r7, #36]	; 0x24
 8006488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	09db      	lsrs	r3, r3, #7
 8006494:	623b      	str	r3, [r7, #32]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2b7f      	cmp	r3, #127	; 0x7f
 800649a:	d8f0      	bhi.n	800647e <SEGGER_SYSVIEW_SendModule+0x66>
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	627a      	str	r2, [r7, #36]	; 0x24
 80064a2:	6a3a      	ldr	r2, [r7, #32]
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	e00b      	b.n	80064d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	1c59      	adds	r1, r3, #1
 80064c0:	61f9      	str	r1, [r7, #28]
 80064c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	09db      	lsrs	r3, r3, #7
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b7f      	cmp	r3, #127	; 0x7f
 80064d4:	d8f0      	bhi.n	80064b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	61fa      	str	r2, [r7, #28]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2280      	movs	r2, #128	; 0x80
 80064ec:	4619      	mov	r1, r3
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7fe fb5e 	bl	8004bb0 <_EncodeStr>
 80064f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80064f6:	2216      	movs	r2, #22
 80064f8:	68f9      	ldr	r1, [r7, #12]
 80064fa:	6938      	ldr	r0, [r7, #16]
 80064fc:	f7fe fc70 	bl	8004de0 <_SendPacket>
      RECORD_END();
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d006      	beq.n	800651a <SEGGER_SYSVIEW_SendModule+0x102>
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4798      	blx	r3
    }
  }
}
 800651a:	bf00      	nop
 800651c:	3730      	adds	r7, #48	; 0x30
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	2000428c 	.word	0x2000428c
 8006528:	20004294 	.word	0x20004294

0800652c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00f      	beq.n	800655a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f2      	bne.n	8006540 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	2000428c 	.word	0x2000428c

08006568 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800656e:	f3ef 8311 	mrs	r3, BASEPRI
 8006572:	f04f 0120 	mov.w	r1, #32
 8006576:	f381 8811 	msr	BASEPRI, r1
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	4817      	ldr	r0, [pc, #92]	; (80065dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800657e:	f7fe fb46 	bl	8004c0e <_PreparePacket>
 8006582:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	4b14      	ldr	r3, [pc, #80]	; (80065e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e00b      	b.n	80065ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1c59      	adds	r1, r3, #1
 800659c:	6179      	str	r1, [r7, #20]
 800659e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	09db      	lsrs	r3, r3, #7
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b7f      	cmp	r3, #127	; 0x7f
 80065b0:	d8f0      	bhi.n	8006594 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	617a      	str	r2, [r7, #20]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80065c2:	221b      	movs	r2, #27
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f7fe fc0a 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f383 8811 	msr	BASEPRI, r3
}
 80065d2:	bf00      	nop
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20004294 	.word	0x20004294
 80065e0:	20004290 	.word	0x20004290

080065e4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80065e4:	b40f      	push	{r0, r1, r2, r3}
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80065ec:	f107 0314 	add.w	r3, r7, #20
 80065f0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80065f2:	1d3b      	adds	r3, r7, #4
 80065f4:	461a      	mov	r2, r3
 80065f6:	2100      	movs	r1, #0
 80065f8:	6938      	ldr	r0, [r7, #16]
 80065fa:	f7fe ff03 	bl	8005404 <_VPrintTarget>
  va_end(ParamList);
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006608:	b004      	add	sp, #16
 800660a:	4770      	bx	lr

0800660c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	; 0x28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006614:	f3ef 8311 	mrs	r3, BASEPRI
 8006618:	f04f 0120 	mov.w	r1, #32
 800661c:	f381 8811 	msr	BASEPRI, r1
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	4827      	ldr	r0, [pc, #156]	; (80066c0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006624:	f7fe faf3 	bl	8004c0e <_PreparePacket>
 8006628:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	6938      	ldr	r0, [r7, #16]
 8006630:	f7fe fabe 	bl	8004bb0 <_EncodeStr>
 8006634:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	2301      	movs	r3, #1
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	e00b      	b.n	8006658 <SEGGER_SYSVIEW_Warn+0x4c>
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	6279      	str	r1, [r7, #36]	; 0x24
 800664a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	09db      	lsrs	r3, r3, #7
 8006656:	623b      	str	r3, [r7, #32]
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	2b7f      	cmp	r3, #127	; 0x7f
 800665c:	d8f0      	bhi.n	8006640 <SEGGER_SYSVIEW_Warn+0x34>
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	627a      	str	r2, [r7, #36]	; 0x24
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	2300      	movs	r3, #0
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e00b      	b.n	8006690 <SEGGER_SYSVIEW_Warn+0x84>
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	61f9      	str	r1, [r7, #28]
 8006682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	09db      	lsrs	r3, r3, #7
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b7f      	cmp	r3, #127	; 0x7f
 8006694:	d8f0      	bhi.n	8006678 <SEGGER_SYSVIEW_Warn+0x6c>
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	61fa      	str	r2, [r7, #28]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066a6:	221a      	movs	r2, #26
 80066a8:	68f9      	ldr	r1, [r7, #12]
 80066aa:	6938      	ldr	r0, [r7, #16]
 80066ac:	f7fe fb98 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f383 8811 	msr	BASEPRI, r3
}
 80066b6:	bf00      	nop
 80066b8:	3728      	adds	r7, #40	; 0x28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20004294 	.word	0x20004294

080066c4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80066c8:	4b13      	ldr	r3, [pc, #76]	; (8006718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80066ca:	7e1b      	ldrb	r3, [r3, #24]
 80066cc:	4619      	mov	r1, r3
 80066ce:	4a13      	ldr	r2, [pc, #76]	; (800671c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80066d0:	460b      	mov	r3, r1
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	440b      	add	r3, r1
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4413      	add	r3, r2
 80066da:	336c      	adds	r3, #108	; 0x6c
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80066e0:	7e1b      	ldrb	r3, [r3, #24]
 80066e2:	4618      	mov	r0, r3
 80066e4:	490d      	ldr	r1, [pc, #52]	; (800671c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80066e6:	4603      	mov	r3, r0
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	4403      	add	r3, r0
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	440b      	add	r3, r1
 80066f0:	3370      	adds	r3, #112	; 0x70
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d00b      	beq.n	8006710 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80066f8:	4b07      	ldr	r3, [pc, #28]	; (8006718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80066fa:	789b      	ldrb	r3, [r3, #2]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d107      	bne.n	8006710 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006702:	2201      	movs	r2, #1
 8006704:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006706:	f7fe fa8d 	bl	8004c24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800670c:	2200      	movs	r2, #0
 800670e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006710:	4b01      	ldr	r3, [pc, #4]	; (8006718 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006712:	781b      	ldrb	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20004264 	.word	0x20004264
 800671c:	20004404 	.word	0x20004404

08006720 <__libc_init_array>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	2500      	movs	r5, #0
 8006724:	4e0c      	ldr	r6, [pc, #48]	; (8006758 <__libc_init_array+0x38>)
 8006726:	4c0d      	ldr	r4, [pc, #52]	; (800675c <__libc_init_array+0x3c>)
 8006728:	1ba4      	subs	r4, r4, r6
 800672a:	10a4      	asrs	r4, r4, #2
 800672c:	42a5      	cmp	r5, r4
 800672e:	d109      	bne.n	8006744 <__libc_init_array+0x24>
 8006730:	f000 f83c 	bl	80067ac <_init>
 8006734:	2500      	movs	r5, #0
 8006736:	4e0a      	ldr	r6, [pc, #40]	; (8006760 <__libc_init_array+0x40>)
 8006738:	4c0a      	ldr	r4, [pc, #40]	; (8006764 <__libc_init_array+0x44>)
 800673a:	1ba4      	subs	r4, r4, r6
 800673c:	10a4      	asrs	r4, r4, #2
 800673e:	42a5      	cmp	r5, r4
 8006740:	d105      	bne.n	800674e <__libc_init_array+0x2e>
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006748:	4798      	blx	r3
 800674a:	3501      	adds	r5, #1
 800674c:	e7ee      	b.n	800672c <__libc_init_array+0xc>
 800674e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006752:	4798      	blx	r3
 8006754:	3501      	adds	r5, #1
 8006756:	e7f2      	b.n	800673e <__libc_init_array+0x1e>
 8006758:	08006930 	.word	0x08006930
 800675c:	08006930 	.word	0x08006930
 8006760:	08006930 	.word	0x08006930
 8006764:	08006934 	.word	0x08006934

08006768 <memcmp>:
 8006768:	b530      	push	{r4, r5, lr}
 800676a:	2400      	movs	r4, #0
 800676c:	42a2      	cmp	r2, r4
 800676e:	d101      	bne.n	8006774 <memcmp+0xc>
 8006770:	2000      	movs	r0, #0
 8006772:	e007      	b.n	8006784 <memcmp+0x1c>
 8006774:	5d03      	ldrb	r3, [r0, r4]
 8006776:	3401      	adds	r4, #1
 8006778:	190d      	adds	r5, r1, r4
 800677a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800677e:	42ab      	cmp	r3, r5
 8006780:	d0f4      	beq.n	800676c <memcmp+0x4>
 8006782:	1b58      	subs	r0, r3, r5
 8006784:	bd30      	pop	{r4, r5, pc}

08006786 <memcpy>:
 8006786:	b510      	push	{r4, lr}
 8006788:	1e43      	subs	r3, r0, #1
 800678a:	440a      	add	r2, r1
 800678c:	4291      	cmp	r1, r2
 800678e:	d100      	bne.n	8006792 <memcpy+0xc>
 8006790:	bd10      	pop	{r4, pc}
 8006792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800679a:	e7f7      	b.n	800678c <memcpy+0x6>

0800679c <memset>:
 800679c:	4603      	mov	r3, r0
 800679e:	4402      	add	r2, r0
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d100      	bne.n	80067a6 <memset+0xa>
 80067a4:	4770      	bx	lr
 80067a6:	f803 1b01 	strb.w	r1, [r3], #1
 80067aa:	e7f9      	b.n	80067a0 <memset+0x4>

080067ac <_init>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr

080067b8 <_fini>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr
